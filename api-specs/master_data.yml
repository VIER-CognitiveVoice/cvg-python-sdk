openapi: 3.0.0
servers:
  - description: Local Server
    url: http://localhost:8080/master-api
info:
  description: |-
    CVG master data CRUD operations
  version: '{{VERSION}}'
  title: VIER Cognitive Voice Master Data API
  contact:
    email: support@vier.ai

security:
  - OAuth2: []

paths:
  /userdetails:
    get:
      tags:
        - userdetails
      description: Get all userdetails.
      operationId: getAllUserDetails
      responses:
        '200':
          description: All userdetails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponse'

  /resellers:
    get:
      tags:
        - resellers
      description: Get all resellers.
      operationId: getAllResellers
      responses:
        '200':
          description: All resellers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResellersResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResellersResponse'
    post:
      tags:
        - resellers
      operationId: insertReseller
      description: Create a new Reseller.
      requestBody:
        description: Parameters for the create reseller operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResellerRequest'
      responses:
        '201':
          description: Reseller created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResellerResponse'
        '400':
          description: Bad request
        '500':
          description: Server error

  /resellers/{resellerToken}:
    get:
      tags:
        - resellers
      description: Get reseller.
      operationId: getReseller
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
          description: The reseller token as a UUID
      responses:
        '200':
          description: A reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResellerResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResellerResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResellerResponse'
    post:
      tags:
        - resellers
      description: Update a reseller.
      operationId: updateReseller
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
          description: The reseller token as a UUID
      requestBody:
        description: Parameters for the create customer operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResellerRequest'
      responses:
        '200':
          description: A reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResellerResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResellerResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResellerResponse'

  /customers/{resellerToken}:
    post:
      tags:
        - customers
      description: Create a new Customer.
      operationId: insertCustomer
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      requestBody:
        description: Parameters for the create customer operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '400':
          description: Bad request
        '500':
          description: Server error

  /customers/{resellerToken}/{customerToken}:
    get:
      tags:
        - customers
      description: Get customer.
      operationId: getCustomer
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
      responses:
        '200':
          description: A customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomerResponse'
        '404':
          description: Not Found
        '500':
          description: Server error
    post:
      tags:
        - customers
      description: Update a Customer.
      operationId: updateCustomer
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
      requestBody:
        description: Parameters for the update customer operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
    delete:
      tags:
        - customers
      description: mark a Customer for deletion.
      operationId: markCustomerForDeletion
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
      responses:
        '200':
          description: Customer marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
  /speechserviceprofiles/{resellerToken}:
    get:
      tags:
        - speechServiceProfiles
      description: Get a list of TTS and STT profiles available for the current user.
      operationId: getSpeechServiceProfiles
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfiles'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfiles'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfiles'

  /speechserviceprofiles/{resellerToken}/{customerToken}:
    get:
      tags:
        - speechServiceProfiles
      description: Get a list of TTS and STT profiles available for the current user.
      operationId: getSpeechServiceProfilesForProject
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
          description: The customer token as a UUID - only provide this when querying the profiles for a specific project.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfiles'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfiles'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfiles'
  /speechserviceprofiles/transcriber/{resellerToken}:
    post:
      tags:
        - speechServiceProfiles
      operationId: insertTranscriberProfile
      description: Create a new transcriber profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranscriberProfileCreationParams'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '404':
          description: Not Found
        '500':
          description: Server error
  /speechserviceprofiles/transcriber/{resellerToken}/{profileToken}:
    get:
      tags:
        - speechServiceProfiles
      operationId: getTranscriberProfile
      description: Get a transcriber profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTranscriberProfileResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTranscriberProfileResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTranscriberProfileResponse'
    post:
      tags:
        - speechServiceProfiles
      operationId: updateTranscriberProfile
      description: Update a transcriber profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranscriberProfileUpdateParams'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
    delete:
      tags:
        - speechServiceProfiles
      operationId: deleteTranscriberProfile
      description: Delete a transcriber profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
  /speechserviceprofiles/transcriber/{resellerToken}/{profileToken}/usages:
    get:
      tags:
        - speechServiceProfiles
      description: Check in which projects a transcriber profile is currently used.
      operationId: getTranscriberProfileUsages
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfileUsages'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfileUsages'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfileUsages'
  /speechserviceprofiles/synthesizer/{resellerToken}:
    post:
      tags:
        - speechServiceProfiles
      operationId: insertSynthesizerProfile
      description: Create a new synthesizer profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynthesizerProfileCreationParams'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
  /speechserviceprofiles/synthesizer/{resellerToken}/{profileToken}:
    get:
      tags:
        - speechServiceProfiles
      operationId: getSynthesizerProfile
      description: Get a synthesizer profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSynthesizerProfileResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSynthesizerProfileResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSynthesizerProfileResponse'
    post:
      tags:
        - speechServiceProfiles
      operationId: updateSynthesizerProfile
      description: Update a synthesizer profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynthesizerProfileUpdateParams'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
    delete:
      tags:
        - speechServiceProfiles
      operationId: deleteSynthesizerProfile
      description: Delete a synthesizer profile.
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechServiceProfileTokenResponse'
  /speechserviceprofiles/synthesizer/{resellerToken}/{profileToken}/usages:
    get:
      tags:
        - speechServiceProfiles
      description: Check in which projects a synthesizer profile is currently used.
      operationId: getSynthesizerProfileUsages
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: profileToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfileUsages'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfileUsages'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechServiceProfileUsages'
  /customerrestore/{resellerToken}/{customerToken}:
    post:
      tags:
        - customers
      description: Restore customer.
      operationId: restoreCustomer
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/{resellerToken}/{customerToken}:
    post:
      tags:
        - accounts
      description: Create a new Account.
      operationId: insertAccount
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
      requestBody:
        description: Parameters for the create account operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
        '400':
          description: Bad request
        '500':
          description: Server error

  /account/{resellerToken}/{accountToken}:
    get:
      tags:
        - accounts
      description: Get account.
      operationId: getAccount
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: accountToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
          required: true
      responses:
        '200':
          description: A account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountResponse'
        '404':
          description: Not Found
        '500':
          description: Server error
    post:
      tags:
        - accounts
      description: Update a Account.
      operationId: updateAccount
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: accountToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
          required: true
      requestBody:
        description: Parameters for the update account operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '200':
          description: Account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
    delete:
      tags:
        - accounts
      description: mark an account for deletion.
      operationId: markAccountForDeletion
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: accountToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
          required: true
          description: The account token as a UUID
      responses:
        '200':
          description: marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'


  /accountrestore/{resellerToken}/{accountToken}:
    post:
      tags:
        - accounts
      description: Restore account.
      operationId: restoreAccount
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: accountToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{resellerToken}/{accountToken}:
    post:
      tags:
        - projects
      description: Create a new Project.
      operationId: insertProject
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: accountToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
          required: true
      requestBody:
        description: Parameters for the create project operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplate'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'

  /projectrestore/{resellerToken}/{projectToken}:
    post:
      tags:
        - projects
      description: Restore project.
      operationId: restoreProject
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /project/{resellerToken}/{projectToken}:
    get:
      tags:
        - projects
      description: Get project.
      operationId: getProject
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
      responses:
        '200':
          description: A project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponse'
        '404':
          description: Not Found
        '500':
          description: Server error
    post:
      tags:
        - projects
      description: Update a Project.
      operationId: updateProject
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
      requestBody:
        description: Parameters for the update project operation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTemplate'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
    delete:
      tags:
        - projects
      description: mark a project for deletion.
      operationId: markProjectForDeletion
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
      responses:
        '200':
          description: project marked for deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'

  /project/{resellerToken}/{projectToken}/move:
    post:
      tags:
        - projects
      description: Reassign a project to a new customer and / or account
      operationId: moveProject
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
      requestBody:
        description: The customer token and account token to assign the project to
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveProject'
      responses:
        '201':
          description: Project moved to the specified customer / account
        '400':
          description: Bad Request
        '404':
          description: Project not found
        '500':
          description: Server Error

  /projectcolors/{resellerToken}:
    post:
      tags:
        - projects
      description: Update project colors
      operationId: updateProjectColors
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectColorsRequest'
      responses:
        '200':
          description: Colors have been updated
        '404':
          description: Not Found
        '500':
          description: Server error

  /projectstats/{resellerToken}/{projectToken}:
    get:
      tags:
        - projects
      description: Get project stats
      operationId: getProjectStats
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
        - in: query
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: query
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: query
          name: timezone
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timezone'
          required: true
      responses:
        '200':
          description: A project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectStats'
        '404':
          description: Not Found
        '500':
          description: Server error

  /dialogs/{resellerToken}:
    post:
      tags:
        - dialogs
      description: Queries the dialog history
      operationId: getDialogHistory
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DialogHistoryRequest'
      responses:
        200:
          description: The dialog history matching the result
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DialogHistoryResponse'

  /dialogs/{resellerToken}/estimate:
    post:
      tags:
        - dialogs
      description: Estimates the result size of the given query
      operationId: estimateDialogHistory
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DialogHistoryEstimationRequest'
      responses:
        200:
          description: An estimation of how many results would be delivered
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DialogHistoryEstimationResponse'

  /projectdialogshistory/{resellerToken}/{projectToken}/projectdialoghistory-{start}-{end}.{type}:
    get:
      tags:
        - projects
      description: Get project dialog history as export file
      operationId: getProjectDialogsHistoryAsFile
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
        - in: path
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: type
          schema:
            $ref: '#/components/schemas/SupportedExportFileTypes'
          required: true
      responses:
        '200':
          description: A project
          content:
            application/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
        '415':
          description: Unsupported file extension
        '500':
          description: Server error

  /projecthierarchy/{resellerToken}:
    get:
      tags:
        - projecthierarchy
      description: Get projecthierarchy.
      operationId: getProjectHierarchy
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
      responses:
        '200':
          description: Project Hierarchy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectHierarchy'
        '500':
          description: Server error

  /projectsbilling/project/{resellerToken}/{projectToken}:
    get:
      tags:
        - projectbilling
      description: Get projectbilling.
      operationId: getProjectBilling
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
        - in: query
          name: start
          required: true
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
        - in: query
          name: end
          required: true
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
      responses:
        '200':
          description: Project Billing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectBilling'
        '500':
          description: Server error

  /projectsbilling/project/{resellerToken}/{projectToken}/projectbilling-{start}-{end}.{type}:
    get:
      tags:
        - projectbilling
      description: Get project billing as file
      operationId: getProjectBillingAsFile
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: projectToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
          required: true
        - in: path
          name: start
          required: true
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
        - in: path
          name: end
          required: true
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
        - in: path
          name: type
          schema:
            $ref: '#/components/schemas/SupportedExportFileTypes'
          required: true
      responses:
        '200':
          description: Billing of a project
          content:
            application/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
        '500':
          description: Server error

  /projectsbilling/account/{resellerToken}/projectbilling-{start}-{end}.{type}:
    get:
      tags:
        - projectbilling
      description: Get project billing as file for account
      operationId: getProjectBillingForAccountAsFile
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: type
          schema:
            $ref: '#/components/schemas/SupportedExportFileTypes'
          required: true
      responses:
        '200':
          description: Billing of a project
          content:
            application/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
        '415':
          description: Unsupported file extension
        '500':
          description: Server error

  /projectsbilling/account/{resellerToken}:
    get:
      tags:
        - projectbilling
      description: Get projectbilling for account.
      operationId: getProjectBillingForAccount
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: query
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: query
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
      responses:
        '200':
          description: Project Billing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectBilling'
        '500':
          description: Server error

  /projectsbilling/customer/{resellerToken}:
    get:
      tags:
        - projectbilling
      description: Get projectbilling for customer.
      operationId: getProjectBillingForCustomer
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: query
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: query
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
      responses:
        '200':
          description: Project Billing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectBilling'
        '500':
          description: Server error

  /projectsbilling/customer/{resellerToken}/projectbilling-{start}-{end}.{type}:
    get:
      tags:
        - projectbilling
      description: Get project billing as csv for customer
      operationId: getProjectBillingForCustomerAsFile
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: type
          schema:
            $ref: '#/components/schemas/SupportedExportFileTypes'
          required: true
      responses:
        '200':
          description: Billing of a project
          content:
            application/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
        '415':
          description: Unsupported file extension
        '500':
          description: Server error

  /projectsbilling/reseller/{resellerToken}:
    get:
      tags:
        - projectbilling
      description: Get projectbilling for reseller.
      operationId: getProjectBillingForReseller
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: query
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: query
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
      responses:
        '200':
          description: Project Billing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectBilling'
        '500':
          description: Server error

  /projectsbilling/reseller/{resellerToken}/projectbilling-{start}-{end}.{type}:
    get:
      tags:
        - projectbilling
      description: Get project billing as csv for reseller
      operationId: getProjectBillingForResellerAsFile
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: start
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: end
          schema:
            $ref: 'shared/time.yml#/components/schemas/Timestamp'
          required: true
        - in: path
          name: type
          schema:
            $ref: '#/components/schemas/SupportedExportFileTypes'
          required: true
      responses:
        '200':
          description: Billing of a project
          content:
            application/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
        '415':
          description: Unsupported file extension
        '500':
          description: Server error

  /platform-numbers/{resellerToken}/{customerToken}:
    get:
      tags:
        - platformnumbers
      description: Get all assignable platform numbers that can be assigned to a project
      operationId: getAllAvailablePlatformNumbers
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
      responses:
        '200':
          description: All numbers in an array that can be assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAvailablePlatformNumbersResponse'

  /platform-numbers:
    post:
      tags:
        - platformnumbers
      description: Adds Phone Numbers from a SIP-Trunk to the database and create a 'superblock' from it
      operationId: createRootBlock
      requestBody:
        description: Information required to add the new numbers
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPlatformNumbersRequest'
      responses:
        '201':
          description: Created new number block with given number range
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPlatformNumberBlock'

  /platform-numbers/blocks/{resellerToken}/{customerToken}:
    get:
      tags:
        - platformnumbers
      description: Get all accessible, unassigned number blocks for the user (requested in projectview, to gather all assignable, free blocks)
      operationId: getAllAvailableBlocks
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: path
          name: customerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
          required: true
      responses:
        '200':
          description: Success, the response contains an array of blocks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockListResponse'


  /platform-numbers/blocks:
    get:
      tags:
        - platformnumbers
      description: Get all accessible number blocks for the user (including already assigned ones)
      operationId: getAllBlocks
      responses:
        '200':
          description: success, the response contains an array of trees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RootBlockForestResponse'
    post:
      tags:
        - platformnumbers
      description: Create a new block from a parent block
      operationId: allocateBlock
      requestBody:
        required: true
        description: The information describing the new block that should be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlockRequest'
      responses:
        '201':
          description: Created new Block
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPlatformNumberBlock'

  /platform-numbers/blocks/{blockId}:
    put:
      tags:
        - platformnumbers
      description: Update a blocks description
      operationId: updateBlock
      parameters:
        - in: path
          name: blockId
          schema:
            type: integer
            format: int32
          required: true
          description: The ID of the block to delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockUpdate'
      responses:
        '200':
          description: Update successfull
    delete:
      tags:
        - platformnumbers
      description: Delete a block
      operationId: deallocateBlock
      parameters:
        - in: path
          name: blockId
          schema:
            type: integer
            format: int32
          required: true
          description: The ID of the block to delete
      responses:
        '204':
          description: Update successfull
        '404':
          description: The block das not exist
        '409':
          description: The block could not be removed because it is in use

  /search/reseller/{resellerToken}:
    get:
      tags:
        - findprojects
      description: Find Projects either by name, token or registered number
      operationId: getProjectsForKeyword
      parameters:
        - in: path
          name: resellerToken
          schema:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          required: true
        - in: query
          name: keyword
          schema:
            type: string
          required: true
          description: Part of a project name, registered number or project token
      responses:
        '200':
          description: A list of search results containing the project name and token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
        '404':
          description: Not found
        '500':
          description: Server Error

  /tokens/names:
    post:
      tags:
        - tokens
      description: get reseller and customer names for the tokens
      operationId: getResellerCustomerNames
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenNamesRequest'
      responses:
        '200':
          description: All token with their respective object names associated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNamesResponse'

  /itu/details:
    post:
      tags:
        - itu
      description: Looks up details for a set of phone numbers.
      operationId: getItuNumberDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItuNumberDetailsRequest'
      responses:
        '200':
          description: Details to the given numbers have been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItuNumberDetailsResponse'
  /style/{resellerToken}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
        description: The reseller token as a UUID
    get:
      tags:
        - style
      description: Receives all styles.
      operationId: getResellerStyles
      responses:
        '200':
          description: The style by name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Style'
  /style/{resellerToken}/default:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
        description: The reseller token as a UUID
    get:
      tags:
        - style
      description: Receives the default style.
      operationId: getResellerStyle
      responses:
        '200':
          description: The style by name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Style'
        '404':
          description: No default style has been configured
  /style/{resellerToken}/{name}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
        description: The reseller token as a UUID
      - in: path
        name: name
        schema:
          $ref: '#/components/schemas/StyleName'
        required: true
        description: The reseller token as a UUID
    post:
      tags:
        - style
      description: Creates a style.
      operationId: createResellerStyle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertStyleRequest'
      responses:
        '200':
          description: Style successfully added
    put:
      tags:
        - style
      description: Updates a style.
      operationId: updateResellerStyle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStyleRequest'
      responses:
        '204':
          description: Style successfully
        '404':
          description: Style not found.
    delete:
      tags:
        - style
      description: Deletes a style.
      operationId: deleteResellerStyle
      responses:
        '204':
          description: Style successfully
  /style/{resellerToken}/image/{contentHash}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
        description: The reseller token as a UUID
      - in: path
        name: contentHash
        schema:
          $ref: '#/components/schemas/ContentHash'
        required: true
        description: The reseller token as a UUID
    get:
      tags:
        - style
      description: Receives a image by content hash
      operationId: getStyleImage
      responses:
        '200':
          description: The image content
          content:
            # while this is application/octet-stream, in reality this will be the concrete content type previously uploaded
            '*':
              schema:
                type: string
                format: binary
  /style/{resellerToken}/{name}/image/{kind}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
        description: The reseller token as a UUID
      - in: path
        name: name
        schema:
          $ref: '#/components/schemas/StyleName'
        required: true
        description: The reseller token as a UUID
      - in: path
        name: kind
        schema:
          $ref: '#/components/schemas/StyleImageKind'
        required: true
        description: The reseller token as a UUID
    post:
      tags:
        - style
      description: Receives a image by content hash
      operationId: uploadStyleImage
      requestBody:
        required: true
        content:
          '*':
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: The upload was successful.
        '400':
          description: The file was rejected, possible due to illegal content or size constants.
  /users/{resellerToken}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
    get:
      tags:
        - users
      description: Gets all users as a list of email addresses.
      operationId: getUsersForReseller
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
    post:
      tags:
        - users
      description: Adds a user by email address.
      operationId: addUserToReseller
      requestBody:
        description: Email address of user to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User has been successfully added.
        '400':
          description: The user could not be added to this reseller.
    delete:
      tags:
        - users
      description: Removes a user by email address.
      operationId: removeUserFromReseller
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User has been successfully removed.
        '404':
          description: User not found.
  /users/{resellerToken}/memberships:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
    get:
      tags:
        - users
      description: Gets all memberships of all users involved in this organization.
      operationId: getResellerMemberships
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMemberships'
  /users/{resellerToken}/customer/{customerToken}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
      - in: path
        name: customerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
        required: true
    get:
      tags:
        - users
      description: Gets all users as a list of email addresses.
      operationId: getUsersForCustomer
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
    post:
      tags:
        - users
      description: Adds a user by email address.
      operationId: addUserToCustomer
      requestBody:
        description: Email address of user to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User has been successfully added.
    delete:
      tags:
        - users
      description: Removes a user by email address.
      operationId: removeUserFromCustomer
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User has been successfully removed.
        '404':
          description: User not found.
  /users/{resellerToken}/customer/{customerToken}/memberships:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
      - in: path
        name: customerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
        required: true
    get:
      tags:
        - users
      description: Gets all memberships of all users involved in this organization.
      operationId: getCustomerMemberships
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMemberships'
  /users/{resellerToken}/account/{accountToken}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
      - in: path
        name: accountToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
        required: true
    get:
      tags:
        - users
      description: Gets all users as a list of email addresses.
      operationId: getUsersForAccount
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
    post:
      tags:
        - users
      description: Adds a user by email address.
      operationId: addUserToAccount
      requestBody:
        description: Email address of user to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User has been successfully added.
    delete:
      tags:
        - users
      description: Removes a user by email address.
      operationId: removeUserFromAccount
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User has been successfully removed.
        '404':
          description: User not found.
  /users/{resellerToken}/account/{accountToken}/memberships:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
      - in: path
        name: accountToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
        required: true
    get:
      tags:
        - users
      description: Gets all memberships of all users involved in this organization.
      operationId: getAccountMemberships
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMemberships'
  /users/{resellerToken}/project/{projectToken}:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
      - in: path
        name: projectToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
        required: true
    get:
      tags:
        - users
      description: Gets all users from as a list of email addresses.
      operationId: getUsersForProject
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
    post:
      tags:
        - users
      description: Adds a user by email address.
      operationId: addUserToProject
      requestBody:
        description: Email address of user to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User has been successfully added.
    delete:
      tags:
        - users
      description: Removes a user by email address.
      operationId: removeUserFromProject
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User has been successfully removed.
        '404':
          description: User not found.
  /users/{resellerToken}/memberships/user:
    parameters:
      - in: path
        name: resellerToken
        schema:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        required: true
      - in: query
        name: email
        schema:
          type: string
        required: true
    get:
      tags:
        - users
      description: Gets all memberships of the given user
      operationId: getUserMemberships
      responses:
        '200':
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memberships'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: '/keycloak/auth/realms/VIER/protocol/openid-connect/auth'
          tokenUrl: '/keycloak/auth/realms/VIER/protocol/openid-connect/token'
          scopes:
            openid: Provides an id_token
            profile: Provides access to general user information
  schemas:
    OrganizationMemberships:
      type: object
      required:
        - memberships
      properties:
        memberships:
          $ref: '#/components/schemas/PerUserMemberships'
    PerUserMemberships:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Memberships'
    Memberships:
      type: object
      minProperties: 1
      additionalProperties:
        $ref: '#/components/schemas/ResellerMemberships'
    ResellerMemberships:
      type: object
      required:
        - resellers
        - customers
        - accounts
        - projects
      properties:
        resellers:
          type: array
          items:
            $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        customers:
          type: array
          items:
            $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
        accounts:
          type: array
          items:
            $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
        projects:
          type: array
          items:
            $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
    User:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          nullable: false
          minLength: 3
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    InsertStyleRequest:
      type: object
      required:
        - default
        - light
        - dark
      properties:
        default:
          type: boolean
        light:
          $ref: '#/components/schemas/StyleVariantColors'
        dark:
          $ref: '#/components/schemas/StyleVariantColors'
    UpdateStyleRequest:
      type: object
      required:
        - default
        - light
        - dark
      properties:
        name:
          $ref: '#/components/schemas/StyleName'
        default:
          type: boolean
        light:
          $ref: '#/components/schemas/StyleVariantColors'
        dark:
          $ref: '#/components/schemas/StyleVariantColors'
    StyleName:
      type: string
      format: style-name
      nullable: false
      maxLength: 50
    StyleImageKind:
      type: string
      enum:
        - FAVICON
        - LIGHT_LOGO
        - DARK_LOGO
    Style:
      type: object
      required:
        - name
        - default
        - light
        - dark
      properties:
        name:
          $ref: '#/components/schemas/StyleName'
        default:
          type: boolean
        favicon:
          $ref: '#/components/schemas/ContentHash'
        light:
          $ref: '#/components/schemas/StyleVariant'
        dark:
          $ref: '#/components/schemas/StyleVariant'
    StyleVariant:
      type: object
      required:
        - colors
      properties:
        logo:
          $ref: '#/components/schemas/ContentHash'
        colors:
          $ref: '#/components/schemas/StyleVariantColors'
    StyleVariantColors:
      type: object
      required:
        - primary
        - secondary
        - success
        - warning
        - error
        - info
        - ternary
        - text
      properties:
        primary:
          $ref: '#/components/schemas/ShadedColor'
        secondary:
          $ref: '#/components/schemas/ShadedColor'
        success:
          $ref: '#/components/schemas/ShadedColor'
        warning:
          $ref: '#/components/schemas/ShadedColor'
        error:
          $ref: '#/components/schemas/ShadedColor'
        info:
          $ref: '#/components/schemas/ShadedColor'
        ternary:
          $ref: '#/components/schemas/ShadedColor'
        text:
          $ref: '#/components/schemas/TextColor'
    ShadedColor:
      type: object
      required:
        - light
        - main
        - dark
      properties:
        light:
          $ref: '#/components/schemas/HexColor'
        main:
          $ref: '#/components/schemas/HexColor'
        dark:
          $ref: '#/components/schemas/HexColor'
    TextColor:
      type: object
      required:
        - primary
        - secondary
        - disabled
      properties:
        primary:
          $ref: '#/components/schemas/HexColor'
        secondary:
          $ref: '#/components/schemas/HexColor'
        disabled:
          $ref: '#/components/schemas/HexColor'
    HexColor:
      type: string
      format: hex-color
      nullable: false
      pattern: '^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$'
    ContentHash:
      type: string
      format: content-hash
      nullable: false
    ItuNumberDetailsRequest:
      type: array
      uniqueItems: true
      items:
        type: string
        format: unchecked-phone-number
    ItuNumberDetailsResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ItuNumberDetails'
    ItuNumberDetails:
      type: object
      description: Contains relevant information about a phone number.
      required:
        - countryCode
        - type
        - regions
      properties:
        countryCode:
          type: integer
          format: int32
          description: The international country code of the phone number (e.g. +49 for Germany or +1 for the USA).
        geoCoding:
          type: string
          description: The location we think the number was first acquired in. This is just our best guess, there is no guarantee to its accuracy.
        type:
          type: string
          description: |-
            The type of the a phone number.

            Notes:
            "FIXED_LINE_OR_MOBILE":
                In some regions (e.g. the USA), it is impossible to distinguish between fixed-line and mobile numbers by
                looking at the phone number itself.
            "SHARED_COST":
                The cost of this call is shared between the caller and the recipient, and is hence typically less than
                premium rate calls. See http://en.wikipedia.org/wiki/Shared_Cost_Service for more information.
            "VOIP":
                Voice over IP numbers. This includes TSoIP (Telephony Service over IP).
            "PERSONAL_NUMBER":
                A personal number is associated with a particular person, and may be routed to either a mobile or fixed line
                number. Some more information can be found here: http://en.wikipedia.org/wiki/Personal_Numbers
            "UAN":
                Used for "Universal Access Numbers" or "Company Numbers". They may be further routed to specific offices,
                but allow one number to be used for a company.
            "VOICEMAIL":
                Used for "Voice Mail Access Numbers".
            "UNKNOWN":
                A phone number is of type UNKNOWN when it does not fit any of the known patterns for a specific region.
          enum:
            - 'FIXED_LINE'
            - 'MOBILE'
            - 'FIXED_LINE_OR_MOBILE'
            - 'TOLL_FREE'
            - 'PREMIUM_RATE'
            - 'SHARED_COST'
            - 'VOIP'
            - 'PERSONAL_NUMBER'
            - 'PAGER'
            - 'UAN'
            - 'VOICEMAIL'
            - 'UNKNOWN'
        regions:
          type: array
          description: Region information derived from the number.
          example:
            code: DE
            name: Germany
          items:
            $ref: '#/components/schemas/ItuNumberRegion'
    ItuNumberRegion:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
        name:
          type: string
    UserDetails:
      type: object
      required:
        - roles
        - userName
        - resellers
        - apiBaseUrl
      properties:
        roles:
          type: array
          description: the token of the reseller
          items:
            type: string
        userName:
          type: string
          description: The username
        resellers:
          type: array
          items:
            $ref: '#/components/schemas/ResellerInformation'
        customerToken:
          $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
        transcribers:
          type: array
          description: All known transcribers
          items:
            $ref: '#/components/schemas/SpeechService'
        synthesizers:
          type: array
          description: All known synthesizers
          items:
            $ref: '#/components/schemas/SpeechService'
        apiBaseUrl:
          type: string
          description: Base URL for testing API-calls in Swagger
        deletionRetentionTimeInDays:
          type: integer
          format: int32
          description: The amount of days after project hierarchy elements will be retained before they are deleted
        languages:
          type: array
          items:
            type: object
            required:
              - code
              - language
            properties:
              code:
                type: string
                description: Language code like 'de-DE' or 'en-US'.
              nativeDisplayName:
                type: string
                description: Native name of the language as it should be displayed in the UI.
              englishDisplayName:
                type: string
                description: English name of the language as it should be displayed in the UI.

    GetUserDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            userDetails:
              $ref: '#/components/schemas/UserDetails'

    AddPlatformNumbersRequest:
      type: object
      required:
        - startNumber
        - endNumber
      properties:
        startNumber:
          type: string
          description: The first (lowest) number of the number block to start with (included)
        endNumber:
          type: string
          description: The last (highest) number of the number block to end with (included)
        description:
          type: string
          description: Use to store information about this block
        resellerToken:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
          description: Add the reseller token if you want to directly assign a new block to a reseller


    BlockQueryRequest:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockData'

    BlockData:
      allOf:
        - $ref: '#/components/schemas/AddPlatformNumbersRequest'
        - type: object
          properties:
            customerToken:
              $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
            parent:
              type: integer
              format: int32
              description: The blockId of the parent that this block was created of. May be null if the block is a superblock

    CreateBlockRequest:
      allOf:
        - $ref: '#/components/schemas/BlockData'
        - type: object
          required:
            - parent
            - startNumber
            - endNumber

    GetAvailablePlatformNumbersResponse:
      type: array
      items:
        $ref: 'shared/phone_number.yml#/components/schemas/PlatformNumber'

    SpeechService:
      type: object
      properties:
        vendor:
          $ref: 'shared/speech_service.yml#/components/schemas/Vendor'
        displayName:
          type: string
          description: Name that the user sees

    GetProjectHierarchy:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            hierarchyData:
              type: array
              items:
                type: object
                properties:
                  customerToken:
                    $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
                  customerName:
                    $ref: '#/components/schemas/CustomerName'
                  deletionTimestamp:
                    $ref: 'shared/time.yml#/components/schemas/Timestamp'
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        accountToken:
                          $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
                        accountName:
                          $ref: '#/components/schemas/AccountName'
                        deletionTimestamp:
                          $ref: 'shared/time.yml#/components/schemas/Timestamp'
                        projects:
                          type: array
                          items:
                            type: object
                            required:
                              - projectToken
                              - projectName
                              - externalNumbers
                              - transcriberLanguage
                              - synthesizerLanguage
                              - transcriberVendors
                              - synthesizerVendors
                              - inactive
                              - healthStatus
                            properties:
                              projectToken:
                                $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
                              projectName:
                                $ref: '#/components/schemas/ProjectName'
                              color:
                                $ref: '#/components/schemas/ProjectColor'
                              platformNumber:
                                $ref: 'shared/phone_number.yml#/components/schemas/PlatformNumber'
                              externalNumbers:
                                type: array
                                items:
                                  type: string
                              transcriberLanguage:
                                $ref: 'shared/language.yml#/components/schemas/Language'
                              synthesizerLanguage:
                                $ref: 'shared/language.yml#/components/schemas/Language'
                              transcriberVendors:
                                type: array
                                items:
                                  $ref: 'shared/speech_service.yml#/components/schemas/Vendor'
                              synthesizerVendors:
                                type: array
                                items:
                                  $ref: 'shared/speech_service.yml#/components/schemas/Vendor'
                              deletionTimestamp:
                                $ref: 'shared/time.yml#/components/schemas/Timestamp'
                              healthStatus:
                                $ref: 'shared/project_health.yml#/components/schemas/HealthStatus'

    GetProjectBilling:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            billingData:
              type: object
              properties:
                project:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/GetProjectBillingElement'
                totalMinutes:
                  type: integer
                  format: int32
                totalGerMobileOutgoingMinutes:
                  type: integer
                  format: int32
                totalGerLandlineOutgoingMinutes:
                  type: integer
                  format: int32
                totalIncomingMinutes:
                  type: integer
                  format: int32

    GetProjectBillingElement:
      type: object
      properties:
        totalMinutes:
          type: integer
          format: int32
        totalGerMobileOutgoingMinutes:
          type: integer
          format: int32
        totalIncomingMinutes:
          type: integer
          format: int32
        totalGerLandlineOutgoingMinutes:
          type: integer
          format: int32

    UpdateResellerRequest:
      type: object
      required:
        - resellerName
        - commonConfiguration
      properties:
        resellerName:
          type: string
          description: the name of the reseller
        resellerToken:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        details:
          $ref: '#/components/schemas/ResellerDetails'
        commonConfiguration:
          $ref: '#/components/schemas/CommonConfiguration'

    CreateResellerRequest:
      allOf:
        - $ref: '#/components/schemas/UpdateResellerRequest'
        - type: object
          required:
            - resellerName
            - schema
          properties:
            resellerName:
              $ref: '#/components/schemas/ResellerName'
            schema:
              $ref: '#/components/schemas/ResellerSchema'
            details:
              $ref: '#/components/schemas/ResellerDetails'
    ResellerDetails:
      type: object
      required:
        - defaultLanguage
        - localizations
      properties:
        defaultLanguage:
          $ref: 'shared/language.yml#/components/schemas/Language'
        localizations:
          type: object
          minProperties: 1
          additionalProperties:
            $ref: '#/components/schemas/ResellerLocalizedDetails'
    ResellerLocalizedDetails:
      type: object
      required:
        - contact
      properties:
        contact:
          $ref: '#/components/schemas/ResellerContactDetails'
    ResellerContactDetails:
      type: object
      required:
        - phoneNumber
        - emailAddress
      properties:
        phoneNumber:
          # intentionally not using a number type, we don't really care about the actual value
          type: string
          nullable: false
        emailAddress:
          type: string
          nullable: false
    Reseller:
      allOf:
        - $ref: '#/components/schemas/CreateResellerRequest'
        - type: object
          required:
            - resellerToken
    ResellerInformation:
      type: object
      required:
        - token
        - name
      properties:
        token:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        name:
          $ref: '#/components/schemas/ResellerName'
        details:
          $ref: '#/components/schemas/ResellerDetails'
        defaultStyle:
          $ref: '#/components/schemas/Style'

    CallOriginRestriction:
      type: object
      required:
        - enabled
        - allowedNumbers
      properties:
        enabled:
          type: boolean
        allowedNumbers:
          type: array
          items:
            type: string
            minLength: 1

    CommonConfiguration:
      type: object
      required:
        - allowRecordings
        - maxRecordingRetentionTime
        - anonymizeRemoteNumbers
        - maxDialogRetentionTime
      properties:
        allowRecordings:
          type: boolean
          description: Whether recordings are allowed for children.
        maxRecordingRetentionTime:
          $ref: 'shared/time.yml#/components/schemas/Duration'
        anonymizeRemoteNumbers:
          type: boolean
          description: |
            Whether remote numbers for children should be anonymized.
            The anonymization does not cover the dialog history in the UI, it only anonymizes numbers given to
            third party systems such as bots and integrations.
        maxDialogRetentionTime:
          $ref: 'shared/time.yml#/components/schemas/Duration'

    SearchResult:
      type: object
      properties:
        projectToken:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
        projectName:
          type: string

    SearchResults:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/SearchResult'

    CreateResellerResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - resellerData
          properties:
            resellerData:
              type: object
              required:
                - resellerToken
              properties:
                resellerToken:
                  $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'

    GetResellersResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            resellerData:
              type: array
              items:
                $ref: '#/components/schemas/Reseller'

    GetResellerResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            resellerData:
              $ref: '#/components/schemas/Reseller'

    CreateCustomerRequest:
      type: object
      required:
        - customerName
        - commonConfiguration
      properties:
        customerName:
          $ref: '#/components/schemas/CustomerName'
        customerToken:
          $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
        resellerToken:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        inactive:
          type: boolean
          description: marking whether the customer is inactive
        commonConfiguration:
          $ref: '#/components/schemas/CommonConfiguration'

    CreateCustomerResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - customerData
          properties:
            customerData:
              type: object
              required:
                - customerToken
              properties:
                customerToken:
                  $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'

    GetCustomerResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            customerData:
              $ref: '#/components/schemas/Customer'

    Customer:
      allOf:
        - $ref: '#/components/schemas/CreateCustomerRequest'
        - type: object
          required:
            - customerToken
            - resellerToken
            - inactive

    GetSpeechServiceProfiles:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            speechServicesData:
              $ref: '#/components/schemas/SpeechServiceProfiles'

    SpeechServiceProfiles:
      type: object
      required:
        - synthesizerProfiles
        - transcriberProfiles
      properties:
        synthesizerProfiles:
          type: array
          items:
            $ref: '#/components/schemas/SynthesizerProfile'
        transcriberProfiles:
          type: array
          items:
            $ref: '#/components/schemas/TranscriberProfile'

    SpeechServiceProfileTokenResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - profileData
          properties:
            profileData:
              type: object
              required:
                - profileToken
              properties:
                profileToken:
                  $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'

    GetTranscriberProfileResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            profileData:
              $ref: '#/components/schemas/TranscriberProfile'

    GetSynthesizerProfileResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            profileData:
              $ref: '#/components/schemas/SynthesizerProfile'

    SpeechServiceProfileScope:
      type: object
      description: Who has access to the profile
      properties:
        resellerToken:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
        customerToken:
          $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'

    SpeechServiceProfileCreator:
      type: string
      enum:
        - SUPER_ADMIN
        - RESELLER_ADMIN
        - CUSTOMER_ADMIN

    TranscriberProfileUpdateParams:
      type: object
      required:
        - vendor
        - name
        - billingMode
        - configuration
      properties:
        vendor:
          $ref: 'shared/speech_service.yml#/components/schemas/Vendor'
        name:
          $ref: '#/components/schemas/SpeechServiceProfileName'
        billingMode:
          $ref: '#/components/schemas/TranscriberProfileBillingMode'
        configuration:
          $ref: '#/components/schemas/TranscriberConfiguration'

    TranscriberProfileBillingMode:
      type: string
      enum:
        - VENDOR_STANDARD
        - VENDOR_CUSTOMIZED
        - RESELLER_PROVIDED
        - CUSTOMER_PROVIDED

    TranscriberProfileCreationParams:
      allOf:
        - $ref: '#/components/schemas/TranscriberProfileUpdateParams'
        - type: object
          required:
            - scope
          properties:
            scope:
              $ref: '#/components/schemas/SpeechServiceProfileScope'

    TranscriberProfile:
      allOf:
        - $ref: '#/components/schemas/TranscriberProfileCreationParams'
        - type: object
          required:
            - profileToken
            - creator
          properties:
            profileToken:
              $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
            creator:
              $ref: '#/components/schemas/SpeechServiceProfileCreator'

    TranscriberConfiguration:
      type: object
      description: The vendor-specific configuration for the profile
      required:
        - languages
      properties:
        languages:
          type: array
          items:
            $ref: 'shared/language.yml#/components/schemas/Language'
          minItems: 1
        serverUrl:
          type: string
          minLength: 1
        languageModel:
          type: string
          minLength: 1
        authUser:
          type: string
          minLength: 1
        authKey:
          type: string
          minLength: 1
        useStreaming:
          type: boolean

    SynthesizerProfileUpdateParams:
      type: object
      required:
        - vendor
        - name
        - configuration
      properties:
        vendor:
          $ref: 'shared/speech_service.yml#/components/schemas/Vendor'
        name:
          $ref: '#/components/schemas/SpeechServiceProfileName'
        configuration:
          $ref: '#/components/schemas/SynthesizerConfiguration'

    SynthesizerProfileCreationParams:
      allOf:
        - $ref: '#/components/schemas/SynthesizerProfileUpdateParams'
        - type: object
          required:
            - scope
          properties:
            scope:
              $ref: '#/components/schemas/SpeechServiceProfileScope'

    SynthesizerProfile:
      allOf:
        - $ref: '#/components/schemas/SynthesizerProfileCreationParams'
        - type: object
          required:
            - profileToken
            - creator
          properties:
            profileToken:
              $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'
            creator:
              $ref: '#/components/schemas/SpeechServiceProfileCreator'

    SynthesizerConfiguration:
      type: object
      description: The vendor-specific configuration for the profile
      properties:
        voices:
          type: object
          additionalProperties:
            type: string
            minLength: 1
            description: Mapping from language codes to voice names.
        credentials:
          $ref: '#/components/schemas/SpeechServiceCredentials'

    SpeechServiceCredentials:
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Google
            - Microsoft
            - Amazon
            - Ibm
      discriminator:
        propertyName: type
        mapping:
          Google: '#/components/schemas/GoogleSpeechServiceCredentials'
          Microsoft: '#/components/schemas/MicrosoftSpeechServiceCredentials'
          Amazon: '#/components/schemas/AmazonSpeechServiceCredentials'
          Ibm: '#/components/schemas/IbmSpeechServiceCredentials'

    GoogleSpeechServiceCredentials:
      allOf:
        - $ref: '#/components/schemas/SpeechServiceCredentials'
        - type: object
          required:
            - serviceAccountJson
          properties:
            serviceAccountJson:
              type: string
              minLength: 1

    MicrosoftSpeechServiceCredentials:
      allOf:
        - $ref: '#/components/schemas/SpeechServiceCredentials'
        - type: object
          required:
            - serverUrl
            - authenticationUrl
            - subscriptionKey
          properties:
            serverUrl:
              type: string
              format: uri
            authenticationUrl:
              type: string
              format: uri
            subscriptionKey:
              type: string
              minLength: 1

    AmazonSpeechServiceCredentials:
      allOf:
        - $ref: '#/components/schemas/SpeechServiceCredentials'
        - type: object
          required:
            - accessKeyId
            - secretAccessKey
          properties:
            accessKeyId:
              type: string
              minLength: 1
            secretAccessKey:
              type: string
              minLength: 1

    IbmSpeechServiceCredentials:
      allOf:
        - $ref: '#/components/schemas/SpeechServiceCredentials'
        - type: object
          required:
            - serverUrl
            - apiKey
          properties:
            serverUrl:
              type: string
              format: uri
            apiKey:
              type: string
              minLength: 1

    GetSpeechServiceProfileUsages:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            usageData:
              type: array
              items:
                $ref: '#/components/schemas/SpeechServiceProfileUsages'

    SpeechServiceProfileUsages:
      type: object
      properties:
        projectName:
          $ref: '#/components/schemas/ProjectName'
        projectToken:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'

    CreateAccountRequest:
      type: object
      required:
        - accountName
        - commonConfiguration
      properties:
        accountName:
          $ref: '#/components/schemas/AccountName'
        accountToken:
          $ref: 'shared/tokens.yml#/components/schemas/AccountToken'
        customerName:
          $ref: '#/components/schemas/CustomerName'
        customerToken:
          $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
        resellerToken:
          $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'

        inactive:
          type: boolean
          description: Marking whether the project is inactive
        commonConfiguration:
          $ref: '#/components/schemas/CommonConfiguration'

    Account:
      allOf:
        - $ref: '#/components/schemas/CreateAccountRequest'
        - type: object
          required:
            - accountToken
            - customerName
            - customerToken
            - resellerToken
            - inactive

    CreateAccountResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - accountData
          properties:
            accountData:
              type: object
              required:
                - accountToken
              properties:
                accountToken:
                  $ref: 'shared/tokens.yml#/components/schemas/AccountToken'

    GetAccountResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            accountData:
              $ref: '#/components/schemas/Account'

    ProjectStat:
      type: object
      properties:
        timeslot:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        count:
          type: integer
          format: int32

    GetProjectStats:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - projectStats
          properties:
            projectStats:
              type: object
              required:
                - calls
                - dialogDuration
                - speechServiceUsage
              properties:
                calls:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProjectStat'
                dialogDuration:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProjectStat'
                speechServiceUsage:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProjectStat'

    HistoricDialog:
      type: object
      required:
        - callType
        - status
        - dialogId
        - dialogStarted
        - transcribedMessages
        - synthesizedMessages
        - recordings
      properties:
        callType:
          $ref: 'shared/call_type.yml#/components/schemas/CallType'
        duration:
          $ref: 'shared/time.yml#/components/schemas/Duration'
        status:
          $ref: '#/components/schemas/CallStatus'
        remoteNumber:
          $ref: 'shared/phone_number.yml#/components/schemas/RemoteNumber'
        dialogId:
          $ref: 'shared/tokens.yml#/components/schemas/DialogId'
        dialogStarted:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        dialogFinished:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        transcribedMessages:
          type: integer
          format: int32
        synthesizedMessages:
          type: integer
          format: int32
        dialoutTarget:
          $ref: 'shared/phone_number.yml#/components/schemas/DialoutNumber'
        dialoutStarted:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        dialoutDuration:
          $ref: 'shared/time.yml#/components/schemas/Duration'
        recordings:
          type: array
          items:
            $ref: '#/components/schemas/DialogRecording'

    DialogRecording:
      type: object
      required:
        - startTimestamp
        - duration
        - dialogPhase
        - recordingId
      properties:
        startTimestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        duration:
          $ref: 'shared/time.yml#/components/schemas/Duration'
        dialogPhase:
          $ref: 'shared/recording.yml#/components/schemas/DialogPhase'
        recordingId:
          $ref: 'shared/recording.yml#/components/schemas/RecordingId'
        deletionTimestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
          description: Timestamp when the recording was deleted, or null if it's still available.

    CommonProject:
      type: object
      required:
        - projectName
        - transcribers
        - synthesizers
        - transcriberLanguage
        - synthesizerLanguage
        - botUrl
        - botToken
        - platformNumbers
        - utteranceTimeout
        - minimumNoiseLevel
        - allowOutboundCalls
        - callOriginRestriction
        - commonConfiguration
      properties:
        projectName:
          $ref: '#/components/schemas/ProjectName'
        color:
          $ref: '#/components/schemas/ProjectColor'
        platformNumbers:
          type: array
          items:
            $ref: 'shared/phone_number.yml#/components/schemas/PlatformNumber'
          description: the phone numbers with which you can call the bot
        fallbackNumber:
          $ref: 'shared/phone_number.yml#/components/schemas/DialoutNumber'
        fallbackText:
          type: string
          description: the fallbacktext of the project, that gets read to the caller when the bot is not available
        transcribers:
          type: array
          items:
            $ref: '#/components/schemas/SpeechServiceSelection'
          minItems: 1
          description: the transcribers of the project
        synthesizers:
          type: array
          items:
            $ref: '#/components/schemas/SpeechServiceSelection'
          minItems: 1
          description: the synthesizers of the project
        transcriberLanguage:
          $ref: 'shared/language.yml#/components/schemas/Language'
        synthesizerLanguage:
          $ref: 'shared/language.yml#/components/schemas/Language'
        botUrl:
          $ref: 'shared/project.yml#/components/schemas/BotUrl'
        botToken:
          $ref: 'shared/project.yml#/components/schemas/BotToken'
        botConfiguration:
          $ref: 'shared/project.yml#/components/schemas/BotConfiguration'
        inactivityTimeout:
          $ref: 'shared/project.yml#/components/schemas/InactivityTimeout'
        inactive:
          type: boolean
          description: marking whether the project is inactive
        utteranceTimeout:
          $ref: 'shared/project.yml#/components/schemas/UtteranceTimeout'
        minimumNoiseLevel:
          $ref: 'shared/project.yml#/components/schemas/MinimumNoiseLevel'
        allowOutboundCalls:
          type: boolean
          description: allows the project to do outbound calls
        callOriginRestriction:
          $ref: '#/components/schemas/CallOriginRestriction'
        commonConfiguration:
          $ref: '#/components/schemas/CommonConfiguration'

    ProjectTemplate:
      allOf:
        - $ref: '#/components/schemas/CommonProject'
        - type: object
          required:
            - provisioningBlocks
            - externalNumbers
          properties:
            provisioningBlocks:
              type: array
              items:
                type: integer
                format: int32
              description: the platform number blocks used to provision your calls (if needed)
            externalNumbers:
              type: array
              items:
                $ref: '#/components/schemas/ExternalNumberTemplate'
              description: international access numbers attached to this project

    ProjectColor:
      type: string
      nullable: true
      enum:
        - SELECTIVE_YELLOW_BASE
        - SELECTIVE_YELLOW_LIGHT
        - SELECTIVE_YELLOW_DARK

        - KELLY_GREEN_BASE
        - KELLY_GREEN_LIGHT
        - KELLY_GREEN_DARK

        - VERDIGRIS_BASE
        - VERDIGRIS_LIGHT
        - VERDIGRIS_DARK

        - FIRE_ENGINE_RED_BASE
        - FIRE_ENGINE_RED_LIGHT
        - FIRE_ENGINE_RED_DARK

        - COSMIC_COBALT_BASE
        - COSMIC_COBALT_LIGHT
        - COSMIC_COBALT_DARK

        - JET_BASE

    ExternalNumberTemplate:
      type: object
      required:
        - number
        - type
      properties:
        number:
          $ref: 'shared/phone_number.yml#/components/schemas/ExternalNumber'
        type:
          type: string
          enum:
            - GEOGRAPHIC
            - TOLL_FREE
            - SHARED_COST
            - OTHER

    Project:
      allOf:
        - $ref: '#/components/schemas/CommonProject'
        - type: object
          required:
            - projectToken
            - provisioningBlocks
          properties:
            projectToken:
              $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
            provisioningBlocks:
              type: array
              items:
                $ref: '#/components/schemas/ProjectPlatformNumberBlock'
              description: the platform number blocks used to provision your calls (if needed)
            externalNumbers:
              type: array
              items:
                $ref: '#/components/schemas/ExternalNumberInfo'
              description: international access numbers attached to this project

    ExternalNumberInfo:
      allOf:
        - $ref: '#/components/schemas/ExternalNumberTemplate'
        - type: object
          required:
            - creator
          properties:
            creator:
              type: string
              enum:
                - SUPER_ADMIN
                - RESELLER_ADMIN
                - CUSTOMER_ADMIN
                - ACCOUNT_ADMIN
                - PROJECT_ADMIN

    SpeechServiceSelection:
      type: object
      required:
        - vendor
      properties:
        vendor:
          $ref: 'shared/speech_service.yml#/components/schemas/Vendor'
        profileToken:
          $ref: 'shared/tokens.yml#/components/schemas/ProfileToken'

    MoveProject:
      type: object
      required:
        - customerToken
        - accountToken
      properties:
        customerToken:
          $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
        accountToken:
          $ref: 'shared/tokens.yml#/components/schemas/AccountToken'

    CreateProjectResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - projectData
          properties:
            projectData:
              type: object
              required:
                - projectToken
              properties:
                projectToken:
                  $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'

    GetProjectResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            projectData:
              $ref: '#/components/schemas/Project'

    SupportedExportFileTypes:
      type: string
      enum:
        - csv
        - xlsx

    ErrorResponse:
      type: object
      properties:
        errorData:
          $ref: '#/components/schemas/ApiErrorResponse'

    ApiErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Used to indicate the error
        fieldReferences:
          type: array
          items:
            type: string
          description: If the error is the result from wrong input[s], the strings are pointing to the affected properties
        shortDescription:
          type: string
          description: A short description for developers to give a hint on what went wrong

    RootBlockForestResponse:
      type: object
      required:
        - forest
      properties:
        forest:
          type: array
          items:
            $ref: '#/components/schemas/PlatformNumberTree'

    PlatformNumberTree:
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - PlatformNumberBlock
            - PlatformNumberRange
      discriminator:
        propertyName: type

    PlatformNumberBlock:
      allOf:
        - $ref: '#/components/schemas/PlatformNumberTree'
        - type: object
          required:
            - id
            - children
            - inUse
          properties:
            id:
              type: integer
              format: int32
            description:
              type: string
            parentId:
              type: integer
              format: int32
            resellerToken:
              $ref: 'shared/tokens.yml#/components/schemas/ResellerToken'
            customerToken:
              $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
            projectToken:
              $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'
            inUse:
              type: boolean
            children:
              type: array
              items:
                $ref: '#/components/schemas/PlatformNumberTree'

    PlatformNumberRange:
      allOf:
        - $ref: '#/components/schemas/PlatformNumberTree'
        - type: object
          required:
            - first
            - last
          properties:
            first:
              $ref: 'shared/phone_number.yml#/components/schemas/PlatformNumber'
            last:
              $ref: 'shared/phone_number.yml#/components/schemas/PlatformNumber'

    BlockListResponse:
      type: array
      items:
        $ref: '#/components/schemas/ProjectPlatformNumberBlock'

    BlockUpdate:
      type: object
      properties:
        description:
          type: string

    ProjectPlatformNumberBlock:
      type: object
      required:
        - id
        - firstNumber
        - lastNumber
      properties:
        id:
          type: integer
          format: int32
          description: the id of the block
        description:
          type: string
          description: the optional description string
        firstNumber:
          $ref: 'shared/phone_number.yml#/components/schemas/PlatformNumber'
          description: the starting of the range of the block
        lastNumber:
          $ref: 'shared/phone_number.yml#/components/schemas/PlatformNumber'
          description: the ending of the range of the block
    TokenNamesRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CustomerTokenList'
    # one might think you can just inline this model, but it "breaks" codegen (generates a raw-typed List).
    CustomerTokenList:
      type: array
      items:
        $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'
    TokenNamesResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NamedCustomerTokens'
    # one might think you can just inline this model, but it "breaks" codegen (generates Object for the value type).
    NamedCustomerTokens:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        customers:
          type: object
          additionalProperties:
            type: string

    DialogHistoryRequest:
      type: object
      description: Query definition for the dialog history
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterExpression'
        orderBy:
          type: array
          items:
            $ref: '#/components/schemas/FilterResultOrdering'
        limit:
          type: integer
          format: int32

    DialogHistoryResponse:
      type: object
      description: Query results
      required:
        - result
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/HistoricDialog'

    DialogHistoryEstimationRequest:
      type: object
      description: Query definition for the dialog history
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterExpression'

    DialogHistoryEstimationResponse:
      type: object
      description: Number of query results for a given filter
      required:
        - estimatedCount
      properties:
        estimatedCount:
          type: integer
          format: int32

    FilterResultOrdering:
      type: object
      required:
        - field
        - direction
      properties:
        field:
          $ref: '#/components/schemas/FilterField'
        direction:
          type: string
          enum:
            - ASCENDING
            - DESCENDING

    FilterField:
      type: string
      enum:
        - 'dialogStarted'
        - 'dialogFinished'
        - 'callType'
        - 'remoteNumber'
        - 'duration'
        - 'dialoutDuration'
        - 'transcribedMessages'
        - 'synthesizedMessages'
        - 'status'
        - 'recordingDuration'
    FilterExpression:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - 'NumericComparisonFilter'
            - 'TextComparisonFilter'
            - 'ExistsFilter'
            - 'NotFilter'
            - 'CustomerFilter'
            - 'AccountFilter'
            - 'ProjectFilter'
            - 'StatusFilter'
            - 'CallTypeFilter'
            - 'RecordingStatusFilter'
      discriminator:
        propertyName: type

    NumericComparisonFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - operator
            - field
            - value
          properties:
            operator:
              type: string
              enum:
                - 'EQUALS'
                - 'NOT_EQUALS'
                - 'LESS_THAN'
                - 'LESS_THAN_OR_EQUALS'
                - 'GREATER_THAN'
                - 'GREATER_THAN_OR_EQUALS'
            field:
              $ref: '#/components/schemas/FilterField'
            value:
              type: integer
              format: int64

    TextComparisonFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - operator
            - field
            - value
          properties:
            operator:
              type: string
              enum:
                - 'EQUALS'
                - 'NOT_EQUALS'
                - 'STARTS_WITH'
                - 'ENDS_WITH'
                - 'CONTAINS'
            field:
              $ref: '#/components/schemas/FilterField'
            value:
              type: string

    ExistsFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - field
          properties:
            field:
              $ref: '#/components/schemas/FilterField'

    NotFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - filter
          properties:
            filter:
              $ref: '#/components/schemas/FilterExpression'

    ProjectFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - token
          properties:
            token:
              $ref: 'shared/tokens.yml#/components/schemas/ProjectToken'

    AccountFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - token
          properties:
            token:
              $ref: 'shared/tokens.yml#/components/schemas/AccountToken'

    CustomerFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - token
          properties:
            token:
              $ref: 'shared/tokens.yml#/components/schemas/CustomerToken'

    StatusFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - status
          properties:
            status:
              $ref: '#/components/schemas/CallStatus'

    CallTypeFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - callType
          properties:
            callType:
              $ref: 'shared/call_type.yml#/components/schemas/CallType'

    RecordingStatusFilter:
      allOf:
        - $ref: '#/components/schemas/FilterExpression'
        - type: object
          required:
            - type
          properties:
            status:
              type: string
              enum:
                - 'NO_RECORDING_STARTED'
                - 'RECORDINGS_AVAILABLE'
                - 'ALL_RECORDINGS_DELETED'

    CallStatus:
      type: string
      enum:
        - REJECTED
        - ONGOING
        - FINISHED

    UpdateProjectColorsRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ProjectColor'
      description:
        A map of project tokens to project colors

    ResellerName:
      type: string
      format: reseller-name

    ResellerSchema:
      type: string
      format: reseller-schema
      description: the schema the reseller is mapped to

    CustomerName:
      type: string
      format: customer-name

    AccountName:
      type: string
      format: account-name

    ProjectName:
      type: string
      format: project-name

    SpeechServiceProfileName:
      type: string
      format: speech-service-profile-name
