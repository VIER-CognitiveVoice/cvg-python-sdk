swagger: "2.0"
info:
  description: >
    With Lindenbaum MRF RESTful API you can do things like answer inbound calls,
    initiate outbound calls, make conference calls, fork calls, transcribe
    voice, generate audio announcements, record calls and play recordings, and
    query meta-data about your calls and recordings. We enable developers to use
    cognitive voice in various applications like contact center, new IVR
    systems, and voice bots.
  version: "20.3"
  title: lbm_mrf_rest_api
  contact:
    name: Lindenbaum voice team
    email: voiceteam@lindenbaum.eu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: "localhost:8081"
basePath: /v2
schemes:
  - http
securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []
consumes:
  - application/json
produces:
  - application/json

paths:
# Status
  /status:
    get:
      tags:
        - status
      summary: Get service status
      description: ""
      operationId: getStatus
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Status"
# Provider resources
  /providers:
    post:
      tags:
        - provider
      summary: Create a new provider
      description: >
        Providers are used for creating calls and mixers.
      operationId: createProvider
      parameters:
        - in: body
          name: nodes
          description: Parameters for the new provider
          required: true
          schema:
              $ref: "#/definitions/NewProvider"
      responses:
        "201":
          description: Provider created
          schema:
            $ref: "#/definitions/Provider"

  /providers/{id}:
    get:
      tags:
        - provider
      summary: Get a provider by ID
      description: ""
      operationId: getProvider
      parameters:
        - in: path
          name: id
          description: ID of provider to get
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Provider"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - provider
      summary: Delete a provider
      description: >
        Deleting a provider will delete all associated resources and numbers.
      operationId: deleteProvider
      parameters:
        - in: path
          name: id
          description: ID of provider to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Provider deleted
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"
  /providers/{id}/externalSink:
    post:
      tags:
        - provider
      summary: Create a new external sink
      description: >
        External Sinks represent connection destinations for endpoints.
      operationId: createExternalSink
      parameters:
        - in: path
          name: id
          description: ID of provider
          required: true
          type: integer
          format: int64
        - in: body
          name: newExternalSink
          description: Parameters for the new external sink
          required: true
          schema:
            $ref: "#/definitions/NewExternalSink"
      responses:
        "201":
          description: External Sink created
          schema:
            $ref: "#/definitions/Sink"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"

# SipAuth resources
  /sipauth:
    post:
      tags:
        - sipauth
      summary: Create SipAuth credentials
      description: >
        Create temporary credentials und URIs for making direct SIP calls to the MRF, for example WebRTC calls from a browser.
        The created credentials will be valid until the number of seconds in the returned "ttl" field elapsed.
      operationId: createSipAuthCredentials
      parameters:
        - in: body
          name: sipauthCredentials
          description: Parameters for the new SipAuth credentials
          required: true
          schema:
            $ref: "#/definitions/NewSipAuthCredentials"
      responses:
        "201":
          description: SipAuth credentials created
          schema:
            $ref: "#/definitions/SipAuthCredentials"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"

# Number resources
  /numbers:
    post:
      tags:
        - number
      summary: Create a new number
      description: >
        Numbers can be called by a telephone.

        Multiple providers can register the same telephone number.
        The providers will be served in a round robin fashion for that number.
        All events associated to the same call will be directed to the same provider.

        The creation of an already existing number can be forced by providing the "FORCE_REGISTRATION" option.
        If the "FORCE_REGISTRATION" option is specified, all previous registrations for the given
        number will be unregistered.

        Numbers may contain the following wildcards:
        "*" matches any number of any digits including none
        "?" matches any single digit
        "[012]" matches one digit given in the bracket
        "[0-9]" matches one digit from the range given in the bracket
        "[!012]" matches one digit that is not given in the bracket
        "[!5-9]" matches one digit that is not from the range given in the bracket
      operationId: createNumber
      parameters:
        - in: body
          name: number
          description: Parameters for the new number
          required: true
          schema:
              $ref: "#/definitions/NewNumber"
      responses:
        "201":
          description: Number created
          schema:
            $ref: "#/definitions/Number"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - number
      summary: Get all numbers for one provider
      description: ""
      operationId: getAllNumbers
      parameters:
        - in: query
          name: providerId
          description: The provider ID to get the numbers from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Number"

  /numbers/{id}:
    delete:
      tags:
        - number
      summary: Delete a number
      description: ""
      operationId: deleteNumber
      parameters:
        - in: path
          name: id
          description: ID of number to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Number deleted
        "404":
          description: Number not found
          schema:
            $ref: "#/definitions/Error"


# Call resources
  /calls:
    post:
      tags:
        - call
      summary: Create a new call
      description: >
        Calls represent outgoing or incoming ISDN or VoIP calls.
        Outgoing calls can be created by POSTing to /calls.
        The following headers may be put in the "callHeaders.headers" field:
        "Info": [a user data string, up to 128 characters],
        "Local-Presentation": "restricted" | "allowed",
        "Overlap-Sending-Digits": [an integer > 0].

      operationId: createCall
      parameters:
        - in: body
          name: newCall
          description: Parameters for the new call
          required: true
          schema:
              $ref: "#/definitions/NewCall"
      responses:
        "201":
          description: Call created
          schema:
            $ref: "#/definitions/Call"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"
        "503":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/RateLimitExceeded'
    get:
      tags:
        - call
      summary: Get all calls for one provider
      description: ""
      operationId: getAllCalls
      parameters:
        - in: query
          name: providerId
          description: The provider ID to get the calls from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Call"

  /calls/{id}:
    get:
      tags:
        - call
      summary: Get a call by ID
      description: ""
      operationId: getCall
      parameters:
        - in: path
          name: id
          description: ID of call
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Call"
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - call
      summary: Delete a call
      description: >
        Deleting a call will also delete all controls and endpoints of that call.
        The call will also be disconnected.
      operationId: deleteCall
      parameters:
        - in: path
          name: id
          description: ID of call to delete
          required: true
          type: integer
          format: int64
        - in: query
          name: cause
          description: ISDN cause code for disconnecting the call
          type: integer
          format: int32
      responses:
        "204":
          description: Call deleted
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/accept:
    post:
      tags:
        - call
      summary: Accept an incoming call
      description: ""
      operationId: acceptCall
      parameters:
        - in: path
          name: id
          description: ID of call to answer
          required: true
          type: integer
          format: int64
        - in: body
          name: acceptOptions
          description: The options for accepting the call.
          required: false
          schema:
            $ref: "#/definitions/AcceptOptions"
      responses:
        "204":
          description: Call accepted
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/answer:
    post:
      tags:
        - call
      summary: Answer an incoming call
      description: ""
      operationId: answerCall
      parameters:
        - in: path
          name: id
          description: ID of call to answer
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Call answered
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/transfer:
    post:
      tags:
        - call
      summary: Transfer a call to an alternate target
      description: >
        Transfer a call to another destination/number. This is an asynchronous
        operation. A successful transfer is signalled by the termination/disconnection
        of the (local) call. On failure, the `TRANSFER_FAILED' event will be
        issued and the local call stays active.

        Please note that a call can only be transferred when it is in INCOMING or
        CONNECTED state. A not connected outgoing call or an already accepted
        incoming call must first be fully connected to be able to get transferred.
      operationId: transferCall
      parameters:
        - in: path
          name: id
          description: ID of call to transfer
          required: true
          type: integer
          format: int64
        - in: body
          name: target
          description: The target number to transfer the call to
          required: true
          schema:
            $ref: "#/definitions/TransferTarget"
      responses:
        "204":
          description: Call transferring
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/migrate:
    post:
      tags:
        - call
      summary: Migrate a call to a different client application
      description: >
        Migrate a call to another client application. This is an asynchronous
        operation. A successful migration is signalled by a 'MIGRATION' event,
        which means the termination/disconnection of the (local) call, and consequently,
        all resources such as members and players are released.
        Note that no further 'DISCONNECTED' event is generated.
        On failure, the `MIGRATION_FAILED' event will be
        issued and the local call stays active.

        Please note that a call can only be migrated to a client application
        which is connected to the same MRF cluster as this call. The target
        client application must have the migration target number registered.
      operationId: migrateCall
      parameters:
        - in: path
          name: id
          description: ID of call to migrate
          required: true
          type: integer
          format: int64
        - in: body
          name: target
          description: The target and options for the migration operation
          required: true
          schema:
            $ref: "#/definitions/MigrationTarget"
      responses:
        "204":
          description: Call migrating
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/dtmf:
    post:
      tags:
        - call
      summary: Send DTMF tones to a call
      description: ""
      operationId: sendDtmf
      parameters:
        - in: path
          name: id
          description: ID of call to send DTMF to
          required: true
          type: integer
          format: int64
        - in: body
          name: dtmfTones
          description: The DTMF tones to send
          required: true
          schema:
            $ref: "#/definitions/DtmfTones"
      responses:
        "204":
          description: DTMF tones sent
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/sendFax:
    post:
      tags:
        - call
      summary: Perform a FAX sending operation on a call
      operationId: sendFax
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          description: ID of call to perform a FAX sending operation on
          required: true
          type: integer
          format: int64
        - in: formData
          name: faxFileName
          type: file
          required: true
          description: The file to upload.
        - in: formData
          name: tsId
          type: string
          required: true
          description: >
            TSID stands for "transmitting subscriber identification." It identifies the specific FAX machine sending a FAX. It is very similar to "CSID" (called subscriber identification), which identifies the FAX machine receiving a FAX.
        - in: formData
          name: mode
          type: string
          required: false
          description: >
            Possible values: "DEFAULT" and "LEGACY". In "LEGACY" mode, T38 is not used.
      responses:
        "204":
          description: FAX sending started
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/receiveFax:
    post:
      tags:
        - call
      summary: Perform a FAX receiving operation on a call. After the FAX is completed, the file may be downloaded from the returned URL.
      description: ""
      operationId: receiveFax
      parameters:
        - in: path
          name: id
          description: ID of call to perform a FAX receiving operation on
          required: true
          type: integer
          format: int64
        - in: body
          name: receiveFaxOptions
          description: The options for the FAX receiving operation
          required: true
          schema:
            $ref: "#/definitions/ReceiveFaxOptions"
      responses:
        "200":
          description: FAX receiving started, returning download URL
          schema:
            type: string
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"

  /calls/{id}/amd:
    post:
      tags:
        - call
      summary: Perform an answering machine detection on a call
      description: ""
      operationId: startAmd
      parameters:
        - in: path
          name: id
          description: ID of call to perform an answering machine detection on
          required: true
          type: integer
          format: int64
        - in: body
          name: amdOptions
          description: The options for the answering machine detection
          required: true
          schema:
            $ref: "#/definitions/AmdOptions"
      responses:
        "204":
          description: AMD started
        "404":
          description: Call not found
          schema:
            $ref: "#/definitions/Error"


# Mixer resources
  /mixers:
    post:
      tags:
        - mixer
      summary: Create a new mixer
      description: >
        Mixer represent conference groups. Calls can be joined into a conference
        group by creating members.
      operationId: createMixer
      parameters:
        - in: body
          name: newMixer
          description: Parameters for the new mixer
          required: true
          schema:
              $ref: "#/definitions/NewMixer"
      responses:
        "201":
          description: Mixer created
          schema:
            $ref: "#/definitions/Mixer"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - mixer
      summary: Get all mixers for one provider
      description: ""
      operationId: getAllMixers
      parameters:
        - in: query
          name: providerId
          description: The provider ID to get the calls from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Mixer"

  /mixers/{id}:
    get:
      tags:
        - mixer
      summary: Get a mixer by ID
      description: ""
      operationId: getMixer
      parameters:
        - in: path
          name: id
          description: ID of mixer
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Mixer"
        "404":
          description: Mixer not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - mixer
      summary: Delete a mixer
      description: >
        Deleting a mixer will unjoin all members from that mixer, and delete all controls and endpoints of that mixer.
      operationId: deleteMixer
      parameters:
        - in: path
          name: id
          description: ID of mixer to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Mixer deleted
        "404":
          description: Mixer not found
          schema:
            $ref: "#/definitions/Error"

# Member resources
  /members:
    post:
      tags:
        - member
      summary: Create a new member
      description: >
        Members represent calls joined into a mixer. The mode parameter controls if the call is
        joined in STANDARD, MUTED, or DOMINANT mode. In STANDARD mode, the joined call is subject
        to n-loudest conference mixing and noise suppression. In MUTED mode, the call can only
        listen to the conference. In DOMINANT mode, the call is always mixed into the conference
        and no noise suppression is applied.
      operationId: createMember
      parameters:
        - in: body
          name: newMember
          description: Parameters for the new member
          required: true
          schema:
            $ref: "#/definitions/NewMember"
      responses:
        "201":
          description: Member created
          schema:
            $ref: "#/definitions/Member"
        "404":
          description: Mixer or call not found, or provider mismatch
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - member
      summary: Get all members for one mixer
      description: ""
      operationId: getAllMembers
      parameters:
        - in: query
          name: mixerId
          description: The mixer ID to get the members from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Member"

  /members/{id}:
    get:
      tags:
        - member
      summary: Get a member by ID
      description: ""
      operationId: getMember
      parameters:
        - in: path
          name: id
          description: ID of member
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Member"
        "404":
          description: Member not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - member
      summary: Delete a member
      description: >
        Deleting a member will unjoin it.
      operationId: deleteMember
      parameters:
        - in: path
          name: id
          description: ID of member to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Member deleted
        "404":
          description: Member not found
          schema:
            $ref: "#/definitions/Error"

  /members/{id}/mode:
    post:
      tags:
        - member
      summary: Change a member mode
      description: >
        Changing the mode of a member
      operationId: changeMemberMode
      parameters:
        - in: path
          name: id
          description: ID of member to change the mode
          required: true
          type: integer
          format: int64
        - in: body
          name: mode
          description: The new mode
          required: true
          schema:
            $ref: "#/definitions/MemberMode"
      responses:
        "204":
          description: Member mode changed
        "404":
          description: Member not found
          schema:
            $ref: "#/definitions/Error"

# Video Mixer resources
  /videoMixers:
    post:
      tags:
        - videoMixer
      summary: Create a new video mixer
      description: >
        VideoMixers represent conference groups for video channels. Calls can be joined into a conference
        group by creating VideoMembers, only the video channels of a call will be joined in the VideoMixer.

        At the moment only switching VideoMixers are supported by this API. So the mixers created will
        always be switching VideoMixers.
      operationId: createVideoMixer
      parameters:
        - in: body
          name: newVideoMixer
          description: Parameters for the new VideoMixer
          required: true
          schema:
            $ref: "#/definitions/NewVideoMixer"
      responses:
        "201":
          description: VideoMixer created
          schema:
            $ref: "#/definitions/VideoMixer"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - videoMixer
      summary: Get all VideoMixers for one provider
      description: ""
      operationId: getAllVideoMixers
      parameters:
        - in: query
          name: providerId
          description: The provider ID to get the calls from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/VideoMixer"

  /videoMixers/{id}:
    get:
      tags:
        - videoMixer
      summary: Get a VideoMixer by ID
      description: ""
      operationId: getVideoMixer
      parameters:
        - in: path
          name: id
          description: ID of VideoMixer
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/VideoMixer"
        "404":
          description: VideoMixer not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - videoMixer
      summary: Delete a VideoMixer
      description: >
        Deleting a VideoMixer will unjoin all VideoMembers from that VideoMixer.
      operationId: deleteVideoMixer
      parameters:
        - in: path
          name: id
          description: ID of VideoMixer to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: VideoMixer deleted
        "404":
          description: VideoMixer not found
          schema:
            $ref: "#/definitions/Error"

  /videoMixers/{id}/clearSource:
    post:
      tags:
        - videoMixer
      summary: Clear the video source and broadcast a black screen.
      description: Clear the video source and broadcast a black screen.
      operationId: videoMixerClearSource
      parameters:
        - in: path
          name: id
          description: ID of VideoMixer to clear the source on.
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Source cleared on VideoMixer.
        "404":
          description: VideoMixer not found
          schema:
            $ref: "#/definitions/Error"

# Video Member resources
  /videoMembers:
    post:
      tags:
        - videoMember
      summary: Create a new VideoMember
      description: >
        VideoMembers represent calls joined into a VideoMixer. The videoMode parameter controls whether either this
        VideoMember is allowed to sent and receive video (in principle, see setSource) or only receive video.
      operationId: createVideoMember
      parameters:
        - in: body
          name: newVideoMember
          description: Parameters for the new VideoMember
          required: true
          schema:
            $ref: "#/definitions/NewVideoMember"
      responses:
        "201":
          description: VideoMember created
          schema:
            $ref: "#/definitions/VideoMember"
        "404":
          description: VideoMixer or call not found, or provider mismatch
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - videoMember
      summary: Get all VideoMembers for one mixer
      description: ""
      operationId: getAllVideoMembers
      parameters:
        - in: query
          name: videoMixerId
          description: The VideoMixer ID to get the VideoMembers from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/VideoMember"

  /videoMembers/{id}:
    get:
      tags:
        - videoMember
      summary: Get a VideoMember by ID
      description: ""
      operationId: getVideoMember
      parameters:
        - in: path
          name: id
          description: ID of VideoMember
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/VideoMember"
        "404":
          description: VideoMember not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - videoMember
      summary: Delete a VideoMember
      description: >
        Deleting a VideoMember will unjoin it.
      operationId: deleteVideoMember
      parameters:
        - in: path
          name: id
          description: ID of VideoMember to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: VideoMember deleted
        "404":
          description: VideoMember not found
          schema:
            $ref: "#/definitions/Error"

  /videoMembers/{id}/videomode:
    post:
      tags:
        - videoMember
      summary: Change a VideoMember VideoMode
      description: >
        Changing the videoMode of a VideoMember
      operationId: changeVideoMemberVideoMode
      parameters:
        - in: path
          name: id
          description: ID of VideoMember to change the videoMode
          required: true
          type: integer
          format: int64
        - in: body
          name: videoMode
          description: The new VideoMode
          required: true
          schema:
            $ref: "#/definitions/VideoMemberVideoMode"
      responses:
        "204":
          description: VideoMember videoMode changed
        "404":
          description: VideoMember not found
          schema:
            $ref: "#/definitions/Error"

  /videoMembers/{id}/setSource:
    post:
      tags:
        - videoMember
      summary: Select the video source in a switching VideoMixer.
      description: >
        Declares this VideoMember as a source in a switching VideoMixer.
        NoOp if the associated VideoMixer is tiling.
      operationId: changeVideoMemberSetSource
      parameters:
        - in: path
          name: id
          description: ID of VideoMember to set as source
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: VideoMember is set as source.
        "404":
          description: VideoMember not found
          schema:
            $ref: "#/definitions/Error"

# Control resources
  /controls:
    post:
      tags:
        - control
      summary: Create a new control
      description: >
        Controls represent players or recorders. They can be started, paused, resumed and
        stopped.
      operationId: createControl
      parameters:
        - in: body
          name: newControl
          description: Parameters for the new control
          required: true
          schema:
            $ref: "#/definitions/NewControl"
      responses:
        "201":
          description: Control created
          schema:
            $ref: "#/definitions/Control"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - control
      summary: Get all controls for one call or mixer
      description: ""
      operationId: getAllControls
      parameters:
        - in: query
          name: callOrMixerId
          description: The call or mixer ID to get the controls from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Control"

  /controls/{id}:
    get:
      tags:
        - control
      summary: Get a control by ID
      description: ""
      operationId: getControl
      parameters:
        - in: path
          name: id
          description: ID of control
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Control"
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - control
      summary: Delete a control
      description: >
        Deleting a control will stop its playbacks and recordings.
      operationId: deleteControl
      parameters:
        - in: path
          name: id
          description: ID of control to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Control deleted
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

  /controls/{id}/start:
    post:
      tags:
        - control
      summary: Start a playback or recording
      description: ""
      operationId: startControl
      parameters:
        - in: path
          name: id
          description: ID of control to start
          required: true
          type: integer
          format: int64
        - in: body
          name: startControl
          required: true
          schema:
            $ref: "#/definitions/StartControl"
      responses:
        "204":
          description: Control started
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

  /controls/{id}/startRecorder:
    post:
      tags:
        - control
      summary: Start a recording
      description: ""
      operationId: startRecorder
      parameters:
        - in: path
          name: id
          description: ID of recorder to start
          required: true
          type: integer
          format: int64
        - in: body
          name: startRecorder
          required: true
          schema:
            $ref: "#/definitions/StartRecorder"
      responses:
        "200":
          description: Recorder started, returning download URL
          schema:
            type: string
        "404":
          description: Recorder not found
          schema:
            $ref: "#/definitions/Error"

  /controls/{id}/pause:
    post:
      tags:
        - control
      summary: Pause a playback or recording
      description: ""
      operationId: pauseControl
      parameters:
        - in: path
          name: id
          description: ID of control to pause
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Control paused
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

  /controls/{id}/resume:
    post:
      tags:
        - control
      summary: Resume a playback or recording
      description: ""
      operationId: resumeControl
      parameters:
        - in: path
          name: id
          description: ID of control to resume
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Control resumed
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

  /controls/{id}/stop:
    post:
      tags:
        - control
      summary: Stop a playback or recording
      description: ""
      operationId: stopControl
      parameters:
        - in: path
          name: id
          description: ID of control to stop
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Control stopped
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

  /controls/{id}/tempo:
    post:
      tags:
        - control
      summary: Change the tempo of a playback
      description: ""
      operationId: tempo
      parameters:
        - in: path
          name: id
          description: ID of control to change tempo
          required: true
          type: integer
          format: int64
        - in: body
          name: tempo
          description: The tempo parameters
          required: true
          schema:
            $ref: "#/definitions/Tempo"
      responses:
        "204":
          description: Control tempo changed
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

  /controls/{id}/position:
    post:
      tags:
        - control
      summary: Change the position of a playback relative to the current position
      description: ""
      operationId: position
      parameters:
        - in: path
          name: id
          description: ID of control to change position
          required: true
          type: integer
          format: int64
        - in: body
          name: position
          description: The position parameters
          required: true
          schema:
            $ref: "#/definitions/Position"
      responses:
        "204":
          description: Control position changed
        "404":
          description: Control not found
          schema:
            $ref: "#/definitions/Error"

# Synthesizer resources
  /synthesizers/fallback:
    post:
      tags:
        - synthesizer
      summary: Create a new synthesizer
      description: >
       A synthesizer converts text to speech.
      operationId: createFallbackSynthesizer
      parameters:
        - in: body
          name: synthesizerOptions
          description: Parameters for the new synthesizer
          required: true
          schema:
            $ref: "#/definitions/SynthesizerFallbackOptions"
      responses:
        "201":
          description: Synthesizer created
          schema:
            $ref: "#/definitions/Synthesizer"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"

  /synthesizers:
    post:
      tags:
        - synthesizer
      summary: Create a new synthesizer
      description: >
       A synthesizer converts text to speech.
      operationId: createSynthesizer
      parameters:
        - in: body
          name: synthesizerOptions
          description: Parameters for the new synthesizer
          required: true
          schema:
            $ref: "#/definitions/SynthesizerOptions"
      responses:
        "201":
          description: Synthesizer created
          schema:
            $ref: "#/definitions/Synthesizer"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - synthesizer
      summary: Get all synthesizers for one call or mixer
      description: ""
      operationId: getAllSynthesizers
      parameters:
        - in: query
          name: callOrMixerId
          description: The call or mixer ID to get the synthesizers from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Synthesizer"

  /synthesizers/languages:
    get:
      tags:
        - synthesizer
      summary: Get a map from supported languages to a list of vendors supportings the language.
      description: >
        This information is a summary of the capabilities of the backend systems we are using. So while
        backend systems become unavailable/available, this summary might change.

        Backend systems becoming unavailable/available should only happen in case of
        updates and/or incidents, so it should be either announced or rare.
      operationId: getSynthesizerLanguages
      parameters:
        - in: query
          name: providerId
          description: The provider ID of the provider in use by the client.
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: A map from languages to a list of vendors supporting them.
          schema:
            $ref: "#/definitions/SynthesizerLanguages"

  /synthesizers/{id}:
    get:
      tags:
        - synthesizer
      summary: Get a synthesizer by ID
      description: ""
      operationId: getSynthesizer
      parameters:
        - in: path
          name: id
          description: ID of synthesizer
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Synthesizer"
        "404":
          description: Synthesizer not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - synthesizer
      summary: Delete a synthesizer
      description: >
        Deleting a synthesizer will stop it.
      operationId: deleteSynthesizer
      parameters:
        - in: path
          name: id
          description: ID of synthesizer to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Synthesizer deleted
        "404":
          description: Synthesizer not found
          schema:
            $ref: "#/definitions/Error"

  /synthesizers/{id}/say:
    post:
      tags:
        - synthesizer
      summary: Start a text to speech synthesis
      description: ""
      operationId: say
      parameters:
        - in: path
          name: id
          description: ID of synthesizer
          required: true
          type: integer
          format: int64
        - in: body
          name: sayOptions
          required: true
          schema:
            $ref: "#/definitions/SayOptions"
      responses:
        "204":
          description: Synthesizer started
        "404":
          description: Synthesizer not found
          schema:
            $ref: "#/definitions/Error"

  /synthesizers/{id}/stop:
    post:
      tags:
        - synthesizer
      summary: Stop a synthesizer
      description: ""
      operationId: stopSynthesizer
      parameters:
        - in: path
          name: id
          description: ID of synthesizer to stop
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Synthesizer stopped
        "404":
          description: Synthesizer not found
          schema:
            $ref: "#/definitions/Error"

# Recognizer resources
  /recognizers:
    post:
      tags:
        - recognizer
      summary: Create a new recognizer
      description: >
        A recognizer converts speech to text. It uses a grammar to guide the conversion.
      operationId: createRecognizer
      parameters:
        - in: body
          name: recognizerOptions
          description: Parameters for the new recognizer
          required: true
          schema:
            $ref: "#/definitions/RecognizerOptions"
      responses:
        "201":
          description: Recognizer created
          schema:
            $ref: "#/definitions/Recognizer"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - recognizer
      summary: Get all recognizers for one call or mixer
      description: ""
      operationId: getAllRecognizers
      parameters:
        - in: query
          name: callOrMixerId
          description: The call or mixer ID to get the recognizers from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Recognizer"

  /recognizers/languages:
    get:
      tags:
        - recognizer
      summary: Get a map from supported languages to a list of vendors supportings the language.
      description: >
        This information is a summary of the capabilities of the backend systems we are using. So while
        backend systems become unavailable/available, this summary might change.

        Backend systems becoming unavailable/available should only happen in case of
        updates and/or incidents, so it should be either announced or rare.
      operationId: getRecognizerLanguages
      parameters:
        - in: query
          name: providerId
          description: The provider ID of the provider in use by the client.
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: A map from languages to a list of vendors supporting them.
          schema:
            $ref: "#/definitions/RecognizerLanguages"

  /recognizers/{id}:
    get:
      tags:
        - recognizer
      summary: Get a recognizer by ID
      description: ""
      operationId: getRecognizer
      parameters:
        - in: path
          name: id
          description: ID of recognizer
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Recognizer"
        "404":
          description: Recognizer not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - recognizer
      summary: Delete a recognizer
      description: >
        Deleting a recognizer will stop it.
      operationId: deleteRecognizer
      parameters:
        - in: path
          name: id
          description: ID of recognizer to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Recognizer deleted
        "404":
          description: Recognizer not found
          schema:
            $ref: "#/definitions/Error"

  /recognizers/{id}/gather:
    post:
      tags:
        - recognizer
      summary: Start a grammar based speech to text conversion
      description: ""
      operationId: gather
      parameters:
        - in: path
          name: id
          description: ID of recognizer
          required: true
          type: integer
          format: int64
        - in: body
          name: gatherOptions
          required: true
          schema:
            $ref: "#/definitions/GatherOptions"
      responses:
        "204":
          description: Recognizer started
        "404":
          description: Recognizer not found
          schema:
            $ref: "#/definitions/Error"

  /recognizers/{id}/stop:
    post:
      tags:
        - recognizer
      summary: Stop a recognizer
      description: ""
      operationId: stopRecognizer
      parameters:
        - in: path
          name: id
          description: ID of recognizer to stop
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Recognizer stopped
        "404":
          description: Recognizer not found
          schema:
            $ref: "#/definitions/Error"

# Transcriber resources
  /transcribers/fallback:
    post:
      tags:
        - transcriber
      summary: Create a new transcriber
      description: >
        A transcriber converts arbitrary speech to text.
      operationId: createFallbackTranscriber
      parameters:
        - in: body
          name: transcriberOptions
          description: Parameters for the new transcriber
          required: true
          schema:
            $ref: "#/definitions/TranscriberFallbackOptions"
      responses:
        "201":
          description: Transcriber created
          schema:
            $ref: "#/definitions/Transcriber"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"

  /transcribers:
    post:
      tags:
        - transcriber
      summary: Create a new transcriber
      description: >
        A transcriber converts arbitrary speech to text.
      operationId: createTranscriber
      parameters:
        - in: body
          name: transcriberOptions
          description: Parameters for the new transcriber
          required: true
          schema:
            $ref: "#/definitions/TranscriberOptions"
      responses:
        "201":
          description: Transcriber created
          schema:
            $ref: "#/definitions/Transcriber"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - transcriber
      summary: Get all transcribers for one call or mixer
      description: ""
      operationId: getAllTranscribers
      parameters:
        - in: query
          name: callOrMixerId
          description: The call or mixer ID to get the transcribers from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Transcriber"

  /transcribers/languages:
    get:
      tags:
        - transcriber
      summary: Get a map from supported languages to a list of vendors supportings the language.
      description: >
        This information is a summary of the capabilities of the backend systems we are using. So while
        backend systems become unavailable/available, this summary might change.

        Backend systems becoming unavailable/available should only happen in case of
        updates and/or incidents, so it should be either announced or rare.
      operationId: getTranscriberLanguages
      parameters:
        - in: query
          name: providerId
          description: The provider ID of the provider in use by the client.
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: A map from languages to a list of vendors supporting them.
          schema:
            $ref: "#/definitions/TranscriberLanguages"

  /transcribers/{id}:
    get:
      tags:
        - transcriber
      summary: Get a transcriber by ID
      description: ""
      operationId: getTranscriber
      parameters:
        - in: path
          name: id
          description: ID of transcriber
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Transcriber"
        "404":
          description: Transcriber not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - transcriber
      summary: Delete a transcriber
      description: >
        Deleting a transcriber will stop it.
      operationId: deleteTranscriber
      parameters:
        - in: path
          name: id
          description: ID of transcriber to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Transcriber deleted
        "404":
          description: Transcriber not found
          schema:
            $ref: "#/definitions/Error"

  /transcribers/{id}/transcribe:
    post:
      tags:
        - transcriber
      summary: Start a text to speech synthesis
      description: ""
      operationId: transcribe
      parameters:
        - in: path
          name: id
          description: ID of transcriber
          required: true
          type: integer
          format: int64
        - in: body
          name: startTranscriber
          required: true
          schema:
            $ref: "#/definitions/StartTranscriber"
      responses:
        "204":
          description: Transcriber started
        "404":
          description: Transcriber not found
          schema:
            $ref: "#/definitions/Error"

  /transcribers/{id}/stop:
    post:
      tags:
        - transcriber
      summary: Stop a transcriber
      description: ""
      operationId: stopTranscriber
      parameters:
        - in: path
          name: id
          description: ID of transcriber to stop
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Transcriber stopped
        "404":
          description: Transcriber not found
          schema:
            $ref: "#/definitions/Error"

  # HttpStreamer resources
  /httpStreamers:
    post:
      tags:
        - httpStreamer
      summary: Create a new http streamer
      description: >
        A http streamer streams raw audio data in chunked encoding as PUT
        or POST to an URL endpoint of your choosing.
      operationId: createHttpStreamer
      parameters:
        - in: body
          name: newHttpStreamer
          description: Parameters for the new HttpStreamer
          required: true
          schema:
            $ref: "#/definitions/NewHttpStreamer"
      responses:
        "201":
          description: HttpStreamer created
          schema:
            $ref: "#/definitions/HttpStreamer"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - httpStreamer
      summary: Get all http streamers for one call or mixer
      description: ""
      operationId: getAllHttpStreamers
      parameters:
        - in: query
          name: callOrMixerId
          description: The call or mixer ID to get the HttpStreamers from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/HttpStreamer"

  /httpStreamers/{id}:
    get:
      tags:
        - httpStreamer
      summary: Get a HttpStreamer by ID
      description: ""
      operationId: getHttpStreamer
      parameters:
        - in: path
          name: id
          description: ID of HttpStreamer
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/HttpStreamer"
        "404":
          description: HttpStreamer not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - httpStreamer
      summary: Delete a HttpStreamer
      description: >
        Deleting a HttpStreamer will stop it.
      operationId: deleteHttpStreamer
      parameters:
        - in: path
          name: id
          description: ID of HttpStreamer to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: HttpStreamer deleted
        "404":
          description: HttpStreamer not found
          schema:
            $ref: "#/definitions/Error"

  /httpStreamers/{id}/stream:
    post:
      tags:
        - httpStreamer
      summary: Start to stream incoming audio to the given URL
      description: ""
      operationId: stream
      parameters:
        - in: path
          name: id
          description: ID of HttpStreamer
          required: true
          type: integer
          format: int64
        - in: body
          name: options
          required: true
          schema:
            $ref: "#/definitions/HttpStreamerOptions"
      responses:
        "204":
          description: HttpStreamer started
        "404":
          description: HttpStreamer not found
          schema:
            $ref: "#/definitions/Error"

  /httpStreamers/{id}/stop:
    post:
      tags:
        - httpStreamer
      summary: Stop a HttpStreamer
      description: ""
      operationId: stopHttpStreamer
      parameters:
        - in: path
          name: id
          description: ID of HttpStreamer to stop
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: HttpStreamer stopped
        "404":
          description: HttpStreamer not found
          schema:
            $ref: "#/definitions/Error"

# Grammar resources
  /grammars:
    post:
      tags:
        - grammar
      summary: Create a new grammar
      description: >
        A grammar can be defined and stored for later use with a recognizer.
      operationId: createGrammar
      parameters:
        - in: body
          name: grammar
          description: The grammar to define
          required: true
          schema:
            $ref: "#/definitions/NewGrammarDefinition"
      responses:
        "201":
          description: Grammar created
          schema:
            $ref: "#/definitions/GrammarDefinition"
        "404":
          description: Provider not found
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - grammar
      summary: Get all grammars for one provider
      description: ""
      operationId: getAllGrammars
      parameters:
        - in: query
          name: providerId
          description: The provider ID to get the grammars from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/GrammarDefinition"

  /grammars/{id}:
    get:
      tags:
        - grammar
      summary: Get a grammar by ID
      description: ""
      operationId: getGrammar
      parameters:
        - in: path
          name: id
          description: ID of grammar
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/GrammarDefinition"
        "404":
          description: Grammar not found
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - grammar
      summary: Delete a grammar
      description: ""
      operationId: deleteGrammar
      parameters:
        - in: path
          name: id
          description: ID of grammar to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Grammar deleted
        "404":
          description: Grammar not found
          schema:
            $ref: "#/definitions/Error"

# Endpoint resources
  /endpoints:
    post:
      tags:
        - endpoint
      summary: Create a new endpoint
      description: >
        Endpoints represent RTP endpoints of calls or mixers. Endpoints can provide sinks, and
        can be connected to other endoint's sinks.
      operationId: createEndpoint
      parameters:
        - in: body
          name: newEndpoint
          description: Parameters for the new endpoint
          required: true
          schema:
            $ref: "#/definitions/NewEndpoint"
      responses:
        "201":
          description: Endpoint created
          schema:
            $ref: "#/definitions/Endpoint"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - endpoint
      summary: Get all endpoints for one call or mixer
      description: ""
      operationId: getAllEndpoints
      parameters:
        - in: query
          name: callOrMixerId
          description: The call or mixer ID to get the endpoints from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Endpoint"

  /endpoints/{id}:
    get:
      tags:
        - endpoint
      summary: Get a endpoint by ID
      description: ""
      operationId: getEndpoint
      parameters:
        - in: path
          name: id
          description: ID of endpoint
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Endpoint"
        "404":
          description: Endpoint not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - endpoint
      summary: Delete an endpoint
      description: >
        Deleting an endpoint will disconnect it.
      operationId: deleteEndpoint
      parameters:
        - in: path
          name: id
          description: ID of endpoint to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Endpoint deleted
        "404":
          description: Endpoint not found
          schema:
            $ref: "#/definitions/Error"


# Sink resources
  /sinks:
    post:
      tags:
        - sink
      summary: Create a new sink
      description: >
        Sinks represent connection destinations for endpoints.
      operationId: createSink
      parameters:
        - in: body
          name: newSink
          description: Parameters for the new sink
          required: true
          schema:
            $ref: "#/definitions/NewSink"
      responses:
        "201":
          description: Sink created
          schema:
            $ref: "#/definitions/Sink"
        "404":
          description: Call or mixer not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - sink
      summary: Get all sinks for one endpoint
      description: ""
      operationId: getAllSinks
      parameters:
        - in: query
          name: endpointId
          description: The endpoint ID to get the sinks from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Sink"

  /sinks/{id}:
    get:
      tags:
        - sink
      summary: Get a sink by ID
      description: ""
      operationId: getSink
      parameters:
        - in: path
          name: id
          description: ID of sink
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Sink"
        "404":
          description: Sink not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - sink
      summary: Delete a sink
      description: >
        Deleting a sink will disconnect it.
      operationId: deleteSink
      parameters:
        - in: path
          name: id
          description: ID of sink to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Sink deleted
        "404":
          description: Sink not found
          schema:
            $ref: "#/definitions/Error"


# Connection resources
  /connections:
    post:
      tags:
        - connection
      summary: Create a new connection
      description: >
        Connections represent connected endpoints.
      operationId: createConnection
      parameters:
        - in: body
          name: newConnection
          description: Parameters for the new connection
          required: true
          schema:
            $ref: "#/definitions/NewConnection"
      responses:
        "201":
          description: Connection created
          schema:
            $ref: "#/definitions/Connection"
        "404":
          description: Endpoint and/or sink not found
          schema:
            $ref: "#/definitions/Error"

    get:
      tags:
        - connection
      summary: Get all connections for one sink or endpoint
      description: ""
      operationId: getAllConnections
      parameters:
        - in: query
          name: sinkOrEndpointId
          description: The sink or endpoint ID to get the connections from
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Connection"

  /connections/{id}:
    get:
      tags:
        - connection
      summary: Get a connection by ID
      description: ""
      operationId: getConnection
      parameters:
        - in: path
          name: id
          description: ID of connection
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/Connection"
        "404":
          description: Connection not found
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
        - connection
      summary: Delete a connection
      description: >
        Deleting a connection will disconnect it.
      operationId: deleteConnection
      parameters:
        - in: path
          name: id
          description: ID of connection to delete
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Connection deleted
        "404":
          description: Connection not found
          schema:
            $ref: "#/definitions/Error"


# Model definitions
definitions:

# Status definitions
  Status:
    type: object
    required:
      - timestamp
    properties:
      timestamp:
        type: integer
        format: int64

# Provider definitions
  Provider:
    type: object
    required:
      - id
      - nodes
      - timeout
      - eventEndpoint
    properties:
      id:
        $ref: "#/definitions/ProviderId"
      nodes:
        type: array
        items:
          $ref: "#/definitions/Node"
      timeout:
        type: integer
        format: int64
      eventEndpoint:
        type: string
      apiVersion:
        $ref: "#/definitions/Version"
      mrfVersion:
        $ref: "#/definitions/Version"
      features:
        type: array
        items:
          type: string
  NewProvider:
    type: object
    required:
      - nodes
    properties:
      nodes:
        type: array
        items:
          $ref: "#/definitions/Node"
      timeout:
        type: integer
        format: int64

  Node:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      cookie:
        type: string

  Version:
    type: object
    required:
      - major
      - minor
      - patch
      - snapshot
    properties:
      major:
        type: integer
        format: int32
      minor:
        type: integer
        format: int32
      patch:
        type: integer
        format: int32
      snapshot:
        type: boolean

  ProviderEvent:
    type: object
    required:
      - providerId
      - type
      - timestamp
    properties:
      providerId:
        $ref: "#/definitions/ProviderId"
      type:
        type: string
        enum:
          - ONLINE
          - OFFLINE
          - SHUTDOWN
          - IDLE
          - ACTIVE
      timestamp:
        type: integer
        format: int64

# Number definitions
  Number:
    type: object
    required:
      - id
      - providerId
      - number
    properties:
      id:
        $ref: "#/definitions/NumberId"
      providerId:
        $ref: "#/definitions/ProviderId"
      number:
        type: string
      codecs:
        type: array
        items:
          $ref: "#/definitions/Codecs"

  NewNumber:
    type: object
    required:
      - providerId
      - number
    properties:
      providerId:
        $ref: "#/definitions/ProviderId"
      number:
        type: string
      options:
        type: array
        items:
          type: string
          enum:
            - FORCE_REGISTRATION
      codecs:
        type: array
        items:
          $ref: "#/definitions/Codecs"

  NumberEvent:
    type: object
    required:
      - number
      - type
      - timestamp
    properties:
      number:
        $ref: "#/definitions/Number"
      type:
        type: string
        enum:
          - UNREGISTERED
      timestamp:
        type: integer
        format: int64

# SipAuth definitions
  SipAuthCredentials:
    type: object
    required:
      - id
      - providerId
      - username
      - password
      - ttl
      - stunUris
      - turnUris
      - sipUris
    properties:
      id:
        $ref: "#/definitions/SipAuthCredentialsId"
      providerId:
        $ref: "#/definitions/ProviderId"
      username:
        type: string
      password:
        type: string
      ttl:
        type: integer
        format: int32
      stunUris:
        type: array
        items:
          type: string
      turnUris:
        type: array
        items:
          type: string
      sipUris:
        type: array
        items:
          type: string

  NewSipAuthCredentials:
    type: object
    required:
      - providerId
    properties:
      providerId:
        $ref: "#/definitions/ProviderId"

# Call definitions
  Call:
    type: object
    required:
      - id
      - providerId
      - callParties
    properties:
      id:
        $ref: "#/definitions/CallId"
      providerId:
        $ref: "#/definitions/ProviderId"
      sequenceNumber:
        type: string
      callParties:
        $ref: "#/definitions/CallParties"
  NewCall:
    type: object
    required:
      - providerId
      - callParties
      - callHeaders
    properties:
      providerId:
        $ref: "#/definitions/ProviderId"
      callParties:
        $ref: "#/definitions/CallParties"
      callHeaders:
        $ref: "#/definitions/Headers"
      interfaceList:
        type: array
        items:
          $ref: "#/definitions/InterfaceSpecification"
        description: >
          If this list is non-empty, it specifies which D-channels may be used for the new outgoing call.
      closeToCallId:
        $ref: "#/definitions/CallId"
        description: >
          If present, try to place the new outgoing call "close to" the call with the given ID,
          in order to minimize resource usage and latency when connecting this call with another call.
      codecs:
        type: array
        items:
          $ref: "#/definitions/Codecs"

  CallParties:
    type: object
    required:
      - local
    properties:
      local:
        type: string
      remote:
        type: string
      networkProvided:
        type: boolean
  Codecs:
    type: string
    enum:
      - G711A
      - G711U
      - G722
      - G723
      - G726_40
      - G726_32
      - G726_24
      - G726_16
      - G729A
      - GSM_FR
      - GSM_EFR
      - AMR
      - AMR_WB
      - ILBC
      - G7221
      - L16_8000
      - L16_16000
      - SILK
      - OPUS
      - T38
      - G711A_VBD
      - G711U_VBD
      - H264
      - VP8
      - VP9

  InterfaceSpecification:
    type: object
    required:
      - serialNumber
      - portNumber
    properties:
      serialNumber:
        type: string
      portNumber:
        type: integer
        format: int32
  IsdnCause:
    type: object
    required:
      - code
      - location
    properties:
      code:
        type: integer
        format: int32
      location:
        type: integer
        format: int32
  TransferTarget:
    type: object
    required:
      - target
    properties:
      target:
        type: string
  MigrationTarget:
    type: object
    required:
      - remote
      - timeout
    properties:
      remote:
        type: string
        description: >
          The target number to migrate the call to. Please note that a call can only be migrated to a client application which is connected to the same MRF cluster as this call. The target client application must have the migration target number registered.
      timeout:
        type: integer
        format: int64
        description: >
          The timeout for the migration operation. If the call is not accepted on the remote site within the timeout duration, the migration fails and the call stays at the local site.
      fallbackRemote:
        type: string
        description: >
          If this property is set, a migrated call will be migrated back to this fallback target when the call is deleted by the application. Additionally, a header with the name "IsFallback" is set to "true". If this property is not set, the call will be disconnected when the call is deleted by the application.
      applicationInformation:
        type: object
        additionalProperties:
          type: string
        description: >
          A JSON object of string-valued properties. If present, the string form of this JSON object is put into a header with the name "ApplicationInformation" of the migrated call.
      migrationHeaders:
        $ref: "#/definitions/Headers"
  AcceptOptions:
    type: object
    properties:
      response:
        type: string
        enum:
          - RESPONSE_RINGING
          - RESPONSE_CALL_IS_BEING_FORWARDED
          - RESPONSE_QUEUED
          - RESPONSE_SESSION_PROGRESS
  DtmfTones:
    type: object
    required:
      - dtmfString
    properties:
      dtmfString:
        type: string
  ReceiveFaxOptions:
    type: object
    required:
      - csId
    properties:
      csId:
        type: string
        description: >
          CSID stands for "called subscriber information." It is used in FAX machines as a field for the receiving FAX machine. It is very similar to TSID, or "transmitting subscriber information." When a FAX transmission occurs, the CSID (receiving FAX machine’s information) is transmitted to the sending machine. This information can be used in confirmation pages and FAX logs.
      mode:
        type: string
        description: >
          Possible values: "DEFAULT" and "LEGACY". In "LEGACY" mode, T38 is not used.
  AmdOptions:
    type: object
    properties:
      minNoiseLevel:
        type: integer
        format: int32
        description: >
          Minimum level for noise in dB. Default Value: -50, Range: -90 to 0
      detectionTimeout:
        type: integer
        format: int32
        description: >
          The maximum number of milliseconds detection is allowed to take. Default
          Value: 5000, Range: 1 to 2147483647
      activityTimeout:
        type: integer
        format: int32
        description: >
          The maximum amount of milliseconds an active signal is allowed to be
          silent before silence is detected. Default Value: 240, Range: 1 to
          2147483647
      glitchTimeout:
        type: integer
        format: int32
        description: >
          The maximum amount of milliseconds an active signal is considered to be a
          glitch (not speech/tone). Default Value: 160, Range: 1 to 2147483647
      silenceTimeout:
        type: integer
        format: int32
        description: >
          The maximum amount of milliseconds an active signal is still considered
          to be silence. Default Value: 40, Range: 1 to 2147483647
      speechToneInterval:
        type: integer
        format: int32
        description: >
          The interval in milliseconds the signal is rechecked for a change from
          tone to speech or vice versa. Default Value: 160, Range: 1 to 2147483647
      maxGreetingGaps:
        type: integer
        format: int32
        description: >
          The maximum number of gaps (roughly words) that may appear in the first
          speech segment (aka greeting) from a live speaker. Default Value: 16,
          Range: 1 to 2147483647
      maxGreetingLength:
        type: integer
        format: int32
        description: >
          The maximum number of milliseconds a live speaker is expected to salutate
          a potential caller. Default Value: 3000, Range: 1 to 2147483647
      postGreetingSilence:
        type: integer
        format: int32
        description: >
          The minimum number of milliseconds a live speaker is expected to wait for
          an answer after his/her initial greeting has ended. Default Value: 600,
          Range: 1 to 2147483647

  CallEvent:
    description: >
      A call event contains the corresponding call ID, the type of the event (one of "OFFERED","OUTGOING", "PROCEEDING", "FORWARDED", "ALERTING", "CONNECTED", "UPDATED", "TRANSFER_FAILED", "MIGRATED", "MIGRATION_FAILED" and "DISCONNECTED"), the call parties, the call headers and the timestamp.
      In particular, the supported headers are:
      "Info": [a user data string (UUI)]
      "Local": [same as local call party]
      "Asserted": [asserted identity, network provided]
      "Asserted-Presentation": "allowed" | "restricted"
      "Remote": [same as remote call party]
      "Remote-Presentation": "allowed" | "restricted"
      "Location": "local-user" | "remote-user" | "private-network-local-user" | "public-network-local-user" | "transit-network" | "public-network-remote-user" | "private-network-remote-user" | "international-network" | "network-beyond-interworking"
      "Reason": "Q931/[cause code]" | "SIP/[status code]"
      "Codec": [used codec, for example "G711/A"]
    type: object
    required:
      - callId
      - type
      - callParties
      - headers
      - timestamp
    properties:
      callId:
        $ref: "#/definitions/CallId"
      type:
        type: string
        enum:
          - OFFERED
          - OUTGOING
          - PROCEEDING
          - FORWARDED
          - ALERTING
          - CONNECTED
          - UPDATED
          - MIGRATED
          - MIGRATION_FAILED
          - TRANSFER_FAILED
          - DISCONNECTED
      headers:
        $ref: "#/definitions/Headers"
      callParties:
        $ref: "#/definitions/CallParties"
      timestamp:
        type: integer
        format: int64
  DtmfEvent:
    type: object
    required:
      - callId
      - type
      - dtmfString
      - timestamp
    properties:
      callId:
        $ref: "#/definitions/CallId"
      type:
        type: string
        enum:
          - DTMF_DETECTED
          - DTMF_GENERATED
      dtmfString:
        type: string
      timestamp:
        type: integer
        format: int64
  FaxEvent:
    type: object
    required:
      - callId
      - type
      - timestamp
    properties:
      callId:
        $ref: "#/definitions/CallId"
      type:
        type: string
        enum:
          - FAX_DETECTED
          - FAX_FAILED
          - FAX_PROCEEDING
          - FAX_COMPLETED
      reason:
        type: string
        description: >
          The reason for failure when the event type is FAX_FAILED
      numPages:
        type: integer
        format: int32
        description: >
          The number of pages when the event type is FAX_PROCEEDING or FAX_COMPLETED
      timestamp:
        type: integer
        format: int64
  AmdEvent:
    type: object
    required:
      - callId
      - type
      - timestamp
    properties:
      callId:
        $ref: "#/definitions/CallId"
      type:
        type: string
        enum:
          - AMD_HUMAN_DETECTED
          - AMD_MACHINE_DETECTED
          - AMD_TIMEOUT
      timestamp:
        type: integer
        format: int64

# Mixer definitions
  Mixer:
    type: object
    required:
      - id
      - providerId
    properties:
      id:
        $ref: "#/definitions/MixerId"
      providerId:
        $ref: "#/definitions/ProviderId"
  NewMixer:
    type: object
    required:
      - providerId
    properties:
      providerId:
        $ref: "#/definitions/ProviderId"
  MixerEvent:
    type: object
    required:
     - mixerId
     - type
     - timestamp
    properties:
      mixerId:
        $ref: "#/definitions/MixerId"
      type:
        type: string
        enum:
         - OFFLINE
      timestamp:
        type: integer
        format: int64

# Member definitions
  Member:
    type: object
    required:
      - id
      - mixerId
      - callId
      - mode
    properties:
      id:
        $ref: "#/definitions/MemberId"
      mixerId:
        $ref: "#/definitions/MixerId"
      callId:
        $ref: "#/definitions/CallId"
      mode:
        $ref: "#/definitions/MemberMode"
  NewMember:
    type: object
    required:
      - mixerId
      - callId
      - mode
    properties:
      mixerId:
        $ref: "#/definitions/MixerId"
      callId:
        $ref: "#/definitions/CallId"
      mode:
        $ref: "#/definitions/MemberMode"
  MemberMode:
    type: object
    required:
      - muteState
      - speakerDetection
    properties:
      muteState:
        type: string
        enum:
          - STANDARD
          - MUTED
          - DOMINANT
      speakerDetection:
        type: string
        enum:
          - ENABLED
          - DISABLED
  MemberEvent:
    description: >
      A member event contains the corresponding member Id, the type of the event (one of SPEAKER_ACTIVE and SPEAKER_INACTIVE), an energy level and a timestamp.
    type: object
    required:
      - memberId
      - type
      - energyLevel
      - timestamp
    properties:
      memberId:
        $ref: "#/definitions/MemberId"
      type:
        type: string
        enum:
          - SPEAKER_ACTIVE
          - SPEAKER_INACTIVE
      energyLevel:
        type: integer
        format: int64
        description: >
          The energy level for this member event. The value is between 0 and 100.
      timestamp:
        type: integer
        format: int64

# Video Mixer definitions
  VideoMixer:
    type: object
    required:
      - id
      - providerId
    properties:
      id:
        $ref: "#/definitions/VideoMixerId"
      providerId:
        $ref: "#/definitions/ProviderId"
  NewVideoMixer:
    type: object
    required:
      - providerId
    properties:
      providerId:
        $ref: "#/definitions/ProviderId"
  VideoMixerEvent:
    type: object
    required:
      - videoMixerId
      - type
      - timestamp
    properties:
      videoMixerId:
        $ref: "#/definitions/VideoMixerId"
      type:
        type: string
        enum:
          - OFFLINE
      timestamp:
        type: integer
        format: int64

# Video Member definitions
  VideoMember:
    type: object
    required:
      - id
      - videoMixerId
      - callId
      - videoMode
    properties:
      id:
        $ref: "#/definitions/VideoMemberId"
      videoMixerId:
        $ref: "#/definitions/VideoMixerId"
      callId:
        $ref: "#/definitions/CallId"
      videoMode:
        $ref: "#/definitions/VideoMemberVideoMode"
  NewVideoMember:
    type: object
    required:
      - videoMixerId
      - callId
      - videoMode
    properties:
      videoMixerId:
        $ref: "#/definitions/VideoMixerId"
      callId:
        $ref: "#/definitions/CallId"
      videoMode:
        $ref: "#/definitions/VideoMemberVideoMode"
  VideoMemberVideoMode:
    type: object
    required:
      - mode
    properties:
      mode:
        type: string
        description: >
          Defines whether this member can send and receive video (STANDARD) or only
          receive video (MUTED).
        enum:
          - MUTED
          - STANDARD

# Control definitions
  Control:
    type: object
    required:
      - id
      - callOrMixerId
    properties:
      id:
        $ref: "#/definitions/ControlId"
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
  NewControl:
    type: object
    required:
      - callOrMixerId
      - kind
      - options
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      kind:
        type: string
        enum:
          - PLAYER
          - RECORDER
      options:
        type: array
        items:
          type: string
          enum:
            - STREAM_CONTROL
            - PAUSING
            - SEEKING
            - SCALING
            - MULTI_FILE
            - OUTPUT_VOLUME
            - TIMEOUT
            - NO_INPUT_TIMEOUT
            - ACTIVITY_TIMEOUT
  StartControl:
    type: object
    required:
      - urls
    properties:
      urls:
        type: array
        items:
          type: string
        description: >
           The 'urls' field defines which files are used for playback or recording. In case of playbacks, multiple URLs are allowed.
      offset:
        type: integer
        format: int64
        description: >
          [PLAYBACK OPTION] The 'offset' field defines the offset from the beginning of an audio file in milliseconds to start a playback.
      tempo:
        type: number
        format: double
        description: >
          [PLAYBACK OPTION] The 'tempo' field defines a scaling factor for the playback speed.
          Values less than 1.0 means slower than normal, value of 1.0 means normal speed, and values greater than 1.0 means faster than normal.
          The allowed range is from 0.25 (four times slower) to 5.0 (five times faster).
      volume:
        type: integer
        format: int32
        description: >
          [PLAYBACK OPTION] The 'volume' field controls the volume of a playback in dB, the allowed range is between -36 and 20.
      fileMode:
        type: string
        enum:
          - FILE_MODE_OVERWRITE
          - FILE_MODE_APPEND
        description: >
          [RECORDING OPTION] The 'fileMode' field controls if the recording file gets overwritten or is appended to.
      recordTimeout:
        type: integer
        format: int32
        description: >
          [RECORDING OPTION] The 'recordTimeout' field controls the maximum total length of a recording in milliseconds.
      recordNoInputTimeout:
        type: integer
        format: int32
        description: >
          [RECORDING OPTION] The 'recordNoInputTimeout' field controls if the recorder automatically delays the start of the recording until voice input was detected.
      recordActivityTimeout:
        type: integer
        format: int32
        description: >
          [RECORDING OPTION] The 'recordActivityTimeout' field controls if the recorder automatically stops after the given time of consecutive silence in milliseconds.

  Tempo:
    type: object
    required:
      - tempo
    properties:
      tempo:
        type: number
        format: double
  Position:
    type: object
    required:
      - offset
    properties:
      offset:
        type: integer
        format: int64
  StreamInfo:
    type: object
    required:
      - position
      - duration
      - tempo
    properties:
      position:
        type: integer
        format: int64
      duration:
        type: integer
        format: int64
      tempo:
        type: number
        format: double

  StartRecorder:
    type: object
    properties:
      recordTimeout:
        type: integer
        format: int32
        description: >
          [RECORDING OPTION] The 'recordTimeout' field controls the maximum total length of a recording in milliseconds.
      recordNoInputTimeout:
        type: integer
        format: int32
        description: >
          [RECORDING OPTION] The 'recordNoInputTimeout' field controls if the recorder automatically delays the start of the recording until voice input was detected.
      recordActivityTimeout:
        type: integer
        format: int32
        description: >
          [RECORDING OPTION] The 'recordActivityTimeout' field controls if the recorder automatically stops after the given time of consecutive silence in milliseconds.

  ControlEvent:
    type: object
    required:
      - controlId
      - type
      - timestamp
    properties:
      controlId:
        $ref: "#/definitions/ControlId"
      type:
        type: string
        enum:
          - STARTED
          - PAUSED
          - RESUMED
          - STOPPED
          - FAILED
          - RELEASED
          - OFFLINE
      streamInfo:
        $ref: "#/definitions/StreamInfo"
      recorderStartStopReason:
        type: string
        enum:
          - REQUESTED
          - NO_INPUT
          - INPUT
          - NO_ACTIVITY
          - TIMEOUT
          - ERROR
      timestamp:
        type: integer
        format: int64

# Synthesizer definitions
  SynthesizerVendor:
    type: string
    enum:
      - GOOGLE
      - AMAZON
      - NUANCE
      - MICROSOFT
      - IBM
  Synthesizer:
    type: object
    required:
      - id
      - callOrMixerId
      - language
      - vendor
    properties:
      id:
        $ref: "#/definitions/SynthesizerId"
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendor:
        type: string
  SynthesizerOptions:
    type: object
    required:
      - callOrMixerId
      - language
      - vendor
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendor:
        $ref: '#/definitions/SynthesizerVendor'
      voice:
        type: string
  SynthesizerFallbackOptions:
    type: object
    required:
      - callOrMixerId
      - language
      - vendorVoices
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendorVoices:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/SynthesizerVendorVoice'
  SynthesizerLanguages:
    type: object
    additionalProperties:
      type: array
      items:
        $ref: "#/definitions/SynthesizerVendor"
    description: >
      Property names in this object are BCP47 language tags. The value
      of a property is an array of vendors providing synthesis for
      the language identified of the language tag (the property name).
  SynthesizerVendorVoice:
    type: object
    required:
      - vendor
    properties:
      vendor:
        $ref: '#/definitions/SynthesizerVendor'
      voice:
        type: string
  SayOptions:
    type: object
    required:
      - text
    properties:
      text:
        type: string
      serverUrl:
        type: string
      authUser:
        type: string
      authKey:
        type: string
      correlationId:
        type: string
  SynthesizerEvent:
    type: object
    required:
      - synthesizerId
      - type
      - timestamp
    properties:
      synthesizerId:
        $ref: "#/definitions/SynthesizerId"
      type:
        type: string
        enum:
          - STARTED
          - STOPPED
          - FAILED
          - RELEASED
          - OFFLINE
      text:
        type: string
      correlationId:
        type: string
      vendor:
        type: string
      latency:
        type: integer
        format: int64
      error:
        type: string
      timestamp:
        type: integer
        format: int64

# Recognizer definitions
  Recognizer:
    type: object
    required:
      - id
      - callOrMixerId
      - language
      - vendor
    properties:
      id:
        $ref: "#/definitions/RecognizerId"
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendor:
        type: string
  RecognizerOptions:
    type: object
    required:
      - callOrMixerId
      - language
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendor:
        $ref: "#/definitions/RecognizerVendor"
  RecognizerVendor:
    type: string
    enum:
      - NUANCE
      - SYMPALOG

  GatherOptions:
    type: object
    required:
      - grammar
    properties:
      timeout:
        type: integer
        format: int32
        description: >
          The 'timeout' field controls the maximum total length of a recognition in milliseconds.
      noInputTimeout:
        type: integer
        format: int32
        description: >
          The 'noInputTimeout' field controls if the recognizer automatically delays the start of the recognition until voice input was detected.
      speechCompleteTimeout:
        type: integer
        format: int32
        description: >
          The 'speechCompleteTimeout' field controls if the recognizer automatically stops with a complete result after the given time of consecutive silence in milliseconds.
      speechIncompleteTimeout:
        type: integer
        format: int32
        description: >
          The 'speechIncompleteTimeout' field controls if the recognizer automatically stops with an incomplete result after the given time of consecutive silence in milliseconds.
      grammar:
        $ref: "#/definitions/Grammar"
  Grammar:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/GrammarItem"
    description: >
      A grammar contains a list if grammar items. There are 6 types of grammar items:
      A TEXT item, which contains a sequence of words or numbers.
      A REPEAT item with a minimum and an optional maximum repeat count, which contains a (sub-) grammar. A grammar may thus be recursive.
      A ONE_OF item with a (sub-) grammar. The items in the sub-grammar represent a choice. Again, the ONE_OF item leads to recursive grammars.
      A REFERENCE item references a previously defined grammar by it's grammar ID.
      An XML item contains a raw XML grammar. This item must be at the top level of a non-recursive grammar definition.
      An URI_LIST item contains an array of URIs. This item must be at the top level of a non-recursive grammar definition.
  GrammarItem:
    type: object
    required:
    - type
    properties:
      type:
        type: string
        enum:
          - TEXT
          - REPEAT
          - ONE_OF
          - REFERENCE
          - XML
          - URI_LIST
      text:
        type: array
        items:
          type: string
        description: Use this field if type is TEXT.
      minRepeats:
        type: integer
        format: int32
        description: Use this field if type is REPEAT. Should be greater or equal to 0.
      maxRepeats:
        type: integer
        format: int32
        description: Use this field if type is REPEAT. Should be greater than minRepeats.
      grammar:
        $ref: "#/definitions/Grammar"
        description: Use this field if type is REPEAT or ONE_OF.
      grammarId:
        $ref: "#/definitions/GrammarId"
        description: Use this field if type is REFERENCE.
      xml:
        type: string
        description: Use this field if type is XML.
      uriList:
        type: array
        items:
          type: string
        description: Use this field if type is URI_LIST.
  NewGrammarDefinition:
    type: object
    required:
      - providerId
      - grammar
    properties:
      providerId:
        $ref: "#/definitions/ProviderId"
      grammar:
        $ref: "#/definitions/Grammar"
  GrammarDefinition:
    type: object
    required:
      - id
      - providerId
      - grammar
    properties:
      id:
        $ref: "#/definitions/GrammarId"
      providerId:
        $ref: "#/definitions/ProviderId"
      grammar:
        $ref: "#/definitions/Grammar"
  RecognizerEvent:
    type: object
    required:
      - recognizerId
      - type
      - results
      - timestamp
    properties:
      recognizerId:
        $ref: "#/definitions/RecognizerId"
      type:
        type: string
        enum:
          - STARTED
          - STOPPED
          - FAILED
          - RELEASED
          - OFFLINE
      results:
        type: array
        items:
          $ref: "#/definitions/RecognizerResult"
      timestamp:
        type: integer
        format: int64
  RecognizerResult:
    type: object
    required:
      - confidence
      - text
    properties:
      confidence:
        type: integer
        format: int32
      text:
       type: string
  RecognizerLanguages:
    type: object
    additionalProperties:
      type: array
      items:
        $ref: "#/definitions/RecognizerVendor"
    description: >
      Property names in this object are BCP47 language tags. The value
      of a property is an array of vendors providing transcription for
      the language identified of the language tag (the property name).

# Transcriber definitions
  TranscriberVendor:
    type: string
    enum:
      - GOOGLE
      - EML
      - IBM
      - SPEECHMATICS
      - MICROSOFT
      - NUANCE
  Transcriber:
    type: object
    required:
      - id
      - callOrMixerId
      - language
      - vendor
      - eventEndpoint
    properties:
      id:
        $ref: "#/definitions/TranscriberId"
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendor:
        type: string
      eventEndpoint:
        type: string
  TranscriberOptions:
    type: object
    required:
      - callOrMixerId
      - language
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendor:
        $ref: '#/definitions/TranscriberVendor'
  TranscriberFallbackOptions:
    type: object
    required:
      - callOrMixerId
      - language
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
      language:
        type: string
      vendors:
        type: array
        items:
          $ref: '#/definitions/TranscriberVendor'
  StartTranscriber:
    type: object
    properties:
      timeout:
        type: integer
        format: int32
        description: >
          The 'timeout' field controls the maximum total length of a transcription in milliseconds.
      noInputTimeout:
        type: integer
        format: int32
        description: >
          The 'noInputTimeout' field controls if the transcriber automatically delays the start of the transcription until voice input was detected.
      activityTimeout:
        type: integer
        format: int32
        description: >
          The 'activityTimeout' field controls if the transcriber automatically stops after the given time of consecutive silence in milliseconds.
      minNoiseLevel:
        type: integer
        minimum: -90
        maximum: 0
        format: int32
        description: >
          The 'minNoiseLevel' field controls the sensitivity of the transcriber's utterance detection. Allowed values are in the range between -90 and 0. The default value is -34. It is A level in dB that a signal must surpass to be considered at all.
      utteranceTimeout:
        type: integer
        format: int32
        description: >
          The 'utteranceTimeout' field controls the time (milliseconds) of silence that must occur after non-noise to complete an utterance. Default value is 800.
      useStreaming:
        type: boolean
        description: >
          The 'useStreaming' field controls whether a cloud's streaming API is used. Only available for Google at the moment.
      languageModel:
        type: string
      serverUrl:
        type: string
      authUser:
        type: string
      authKey:
        type: string
      dialog:
        type: string
        description: >
          An application specific handle passed to the used cloud API (if applicable). Depending on the cloud service, passing a dialog may enable generation of METADATA events.
  TranscriberEvent:
    type: object
    required:
      - transcriberId
      - type
      - results
      - timestamp
    properties:
      transcriberId:
        $ref: "#/definitions/TranscriberId"
      type:
        type: string
        enum:
          - STARTED
          - UTTERANCE
          - UPDATED
          - METADATA
          - STOPPED
          - FAILED
          - RELEASED
          - OFFLINE
      results:
        type: array
        items:
          $ref: "#/definitions/TranscriberResult"
      vendor:
        type: string
      error:
        type: string
      metadata:
        type: string
        description: >
          A base64 encoded binary blob representing cloud service sepcific metadata for a transcription process associated with a 'dialog'.
      timestamp:
        type: integer
        format: int64
  TranscriberResult:
    type: object
    required:
      - confidence
      - startTimestamp
      - endTimestamp
      - text
    properties:
      confidence:
        type: integer
        format: int32
      startTimestamp:
        type: integer
        format: int64
      endTimestamp:
        type: integer
        format: int64
      text:
        type: string
      latency:
        type: integer
        format: int64
  TranscriberLanguages:
    type: object
    additionalProperties:
      type: array
      items:
        $ref: "#/definitions/TranscriberVendor"
    description: >
      Property names in this object are BCP47 language tags. The value
      of a property is an array of vendors providing transcription for
      the language identified of the language tag (the property name).

# HttpStreamer definitions
  NewHttpStreamer:
    type: object
    required:
      - callOrMixerId
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
  HttpStreamer:
    type: object
    required:
      - id
      - callOrMixerId
    properties:
      id:
        $ref: "#/definitions/HttpStreamerId"
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
  HttpStreamerMethod:
    type: string
    enum:
      - PUT
      - POST
  HttpStreamerOptions:
    type: object
    required:
      - url
    properties:
      url:
        type: string
      method:
        $ref: '#/definitions/HttpStreamerMethod'
      samplingRate:
        type: integer
        format: int32
      headers:
        $ref: '#/definitions/Headers'
  HttpStreamerEvent:
    type: object
    required:
      - httpStreamerId
      - type
      - timestamp
    properties:
      httpStreamerId:
        $ref: "#/definitions/HttpStreamerId"
      type:
        type: string
        enum:
          - STARTED
          - STOPPED
          - FAILED
          - RELEASED
          - OFFLINE
      result:
        $ref: "#/definitions/HttpStreamerResult"
      error:
        type: string
      timestamp:
        type: integer
        format: int64
  HttpStreamerResult:
    type: object
    required:
      - statusCode
      - headers
      - bodyAsBase64
    properties:
      statusCode:
        type: integer
        format: int32
      headers:
        type: array
        items:
          type: string
      bodyAsBase64:
        type: string

# Endpoint definitions
  Endpoint:
    type: object
    required:
      - id
      - callOrMixerId
    properties:
      id:
        $ref: "#/definitions/EndpointId"
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"
  NewEndpoint:
    type: object
    required:
      - callOrMixerId
    properties:
      callOrMixerId:
        $ref: "#/definitions/CallOrMixerId"

# Sink definitions
  Sink:
    type: object
    required:
      - id
      - endpointId
      - host
      - port
      - rtpPayloads
    properties:
      id:
        $ref: "#/definitions/SinkId"
      endpointId:
        $ref: "#/definitions/EndpointId"
      host:
        type: string
      port:
        type: integer
        format: int32
      rtpPayloads:
        type: array
        items:
          $ref: "#/definitions/RtpPayload"
  NewSink:
    type: object
    required:
      - endpointId
    properties:
      endpointId:
        $ref: "#/definitions/EndpointId"
  NewExternalSink:
    type: object
    required:
      - host
      - port
      - rtpPayloads
    properties:
      host:
        type: string
      port:
        type: integer
        format: int32
      rtpPayloads:
        type: array
        items:
          $ref: "#/definitions/RtpPayload"
  RtpPayload:
    type: object
    required:
      - encoding
      - payloadType
    properties:
      encoding:
        type: string
        enum:
          - G711U
          - G711A
          - OPUS
          - L16_8000
          - L16_16000
          - TELEPHONEEVENT
          - TELEPHONE_EVENT
      payloadType:
        type: integer
        format: int32

# Connection definitions
  Connection:
    type: object
    required:
      - id
      - endpointId
      - sinkId
    properties:
      id:
        $ref: "#/definitions/ConnectionId"
      endpointId:
        $ref: "#/definitions/EndpointId"
      sinkId:
        $ref: "#/definitions/SinkId"
  NewConnection:
    type: object
    required:
      - endpointId
      - sinkId
    properties:
      endpointId:
        $ref: "#/definitions/EndpointId"
      sinkId:
        $ref: "#/definitions/SinkId"

# Generic Headers
  Headers:
    type: object
    required:
      - headers
    properties:
      headers:
        type: array
        items:
          $ref: "#/definitions/Header"

  Header:
    type: object
    required:
      - name
      - value
    properties:
      name:
        type: string
      value:
        type: string

# Error definitions
  RateLimitExceeded:
    type: object
    required:
      - retryAfterMillis
    properties:
      retryAfterMillis:
        type: integer
        format: int64
  Error:
    type: object
    required:
      - statusCode
      - message
    properties:
      statusCode:
        type: integer
        format: int32
      message:
        type: string

  ProviderId:
    type: integer
    format: int64
  NumberId:
    type: integer
    format: int64
  MixerId:
    type: integer
    format: int64
  CallId:
    type: integer
    format: int64
  CallOrMixerId:
    type: integer
    format: int64
  MemberId:
    type: integer
    format: int64
  TranscriberId:
    type: integer
    format: int64
  SynthesizerId:
    type: integer
    format: int64
  RecognizerId:
    type: integer
    format: int64
  ControlId:
    type: integer
    format: int64
  ConnectionId:
    type: integer
    format: int64
  EndpointId:
    type: integer
    format: int64
  SinkId:
    type: integer
    format: int64
  SipAuthCredentialsId:
    type: integer
    format: int64
  VideoMixerId:
    type: integer
    format: int64
  VideoMemberId:
    type: integer
    format: int64
  GrammarId:
    type: integer
    format: int64
  HttpStreamerId:
    type: integer
    format: int64
