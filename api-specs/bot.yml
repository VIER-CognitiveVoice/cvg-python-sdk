openapi: 3.0.0
servers:
  - description: Local Server
    url: http://localhost:8080
info:
  description: |-
    With the VIER Cognitive Voice API you can easily do things like building your voicebots,
    which can be reached via phone calls. You can receive speech input of the customer as
    transcripted text in many languages. Let different voices say your text in this call.
    After the voicebot dialog you may drop the call (call fully completed by bot) or transfer
    the call e.g. to the relevant service hotline (human agent required to satisfy customer).

    On some events, such as receiving an incoming phone call or transcription of a customer's
    utterance, VIER makes an HTTP request to a URL to be provided by you. This is called
    a webhook. To handle a webhook, you need to build a small web application that can accept
    the HTTP requests. The required webhooks are listed as bot endpoints.
  version: '{{VERSION}}'
  title: VIER Cognitive Voice Bot API
  contact:
    email: support@vier.ai
tags:
  - name: bot
    description: endpoints related to text analysis and text responses

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags:
        - bot
      summary: CVG tries to establish a session for a new call with the bot
      operationId: session
      description: |-
        CVG tries to establish a session for a new call with the bot.

        - If the bot responds with HTTP 2xx, the call is accpted.
        - If the bot responds with an error (HTTP 4xx or 5xx), or the endpoint is unreachable, the call is rejected.
      responses:
        '204':
          description: Operation successful
        '400':
          description: Bad request
      requestBody:
        description: Parameters for the session operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionParameters'
  /message:
    post:
      tags:
        - bot
      summary: Customer utterance has been transcribed to text or DTMF input was made
      operationId: message
      responses:
        '204':
          description: Operation successful
        '400':
          description: Bad request
      requestBody:
        description: Parameters for the message operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageParameters'
  /answer:
    post:
      tags:
        - bot
      summary: Result of a prompt
      operationId: answer
      description: Result of a prompt, either a valid result or no result due to a timeout
      responses:
        '204':
          description: Operation successful
        '400':
          description: Bad request
      requestBody:
        description: Parameters for the answer operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerParameters'
  /inactivity:
    post:
      tags:
        - bot
      summary: Call/Session has been inactive
      operationId: inactivity
      responses:
        '204':
          description: Operation successful
        '400':
          description: Bad request
      requestBody:
        description: Parameters for the inactive operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InactivityParameters'
  /terminated:
    post:
      tags:
        - bot
      summary: Call/Session has been terminated
      operationId: terminated
      responses:
        '204':
          description: Operation successful
        '400':
          description: Bad request
      requestBody:
        description: Parameters for the terminated operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminatedParameters'
  /recording:
    post:
      tags:
        - bot
      summary: Recording has finished processing and can be downloaded via the recording API
      operationId: recording
      responses:
        '204':
          description: Operation successful
        '400':
          description: Bad request
      requestBody:
        description: Parameters for the recording operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordingParameters'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: opaque
  schemas:
    SessionParameters:
      type: object
      required:
        - dialogId
        - projectContext
        - timestamp
        - remote # TODO make field optional on next API change
        - language
        - transcriberLanguage
        - synthesizerLanguage
        - callback
        - callType
        - customSipHeaders
        - customDialogData
      properties:
        dialogId:
          $ref: 'shared/tokens.yml#/components/schemas/DialogId'
        projectContext:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectContext'
        timestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        local:
          $ref: 'shared/phone_number.yml#/components/schemas/CustomerLocalParty'
        remote:
          $ref: 'shared/phone_number.yml#/components/schemas/LegacyCustomerRemoteParty'
        language:
          type: string
          format: language-code
          description: |
            The transcriber language configured by the project.

            This field has been superseded by the fields `transcriberLanguage` and `synthesizerLanguage`
          deprecated: true
        transcriberLanguage:
          $ref: 'shared/language.yml#/components/schemas/Language'
        synthesizerLanguage:
          $ref: 'shared/language.yml#/components/schemas/Language'
        callback:
          $ref: 'shared/project.yml#/components/schemas/Callback'
        configuration:
          $ref: 'shared/project.yml#/components/schemas/BotConfiguration'
        callType:
          $ref: 'shared/call_type.yml#/components/schemas/CallType'
        customSipHeaders:
          $ref: 'shared/data.yml#/components/schemas/CustomSipHeaders'
        customDialogData:
          $ref: 'shared/data.yml#/components/schemas/CustomDialogData'
    MessageParameters:
      type: object
      required:
        - dialogId
        - projectContext
        - timestamp
        - type
        - text
        - confidence
        - language
        - callback
      properties:
        dialogId:
          $ref: 'shared/tokens.yml#/components/schemas/DialogId'
        projectContext:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectContext'
        timestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        type:
          type: string
          enum:
            - SPEECH
            - DTMF
          example: SPEECH
        text:
          type: string
          example: Hello!
        confidence:
          $ref: 'shared/confidence.yml#/components/schemas/Confidence'
        vendor:
          $ref: 'shared/speech_service.yml#/components/schemas/SpeechServiceVendor'
        language:
          $ref: 'shared/language.yml#/components/schemas/Language'
          description: Language used for transcription, or the project's transcriber language in case of DTMF.
        callback:
          $ref: 'shared/project.yml#/components/schemas/Callback'
    AnswerParameters:
      type: object
      required:
        - dialogId
        - projectContext
        - timestamp
        - type
        - confidence
        - language
        - callback
      properties:
        dialogId:
          $ref: 'shared/tokens.yml#/components/schemas/DialogId'
        projectContext:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectContext'
        timestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        type:
          $ref: '#/components/schemas/AnswerParametersType'
        confidence:
          $ref: 'shared/confidence.yml#/components/schemas/Confidence'
        vendor:
          $ref: 'shared/speech_service.yml#/components/schemas/SpeechServiceVendor'
        language:
          $ref: 'shared/language.yml#/components/schemas/Language'
          description: Language used for transcription, or the project's transcriber language in case of DTMF.
        callback:
          $ref: 'shared/project.yml#/components/schemas/Callback'
    AnswerParametersType:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          enum:
            - MultipleChoice
            - Number
            - Timeout
          example: Number
      discriminator:
        propertyName: name
        mapping:
          MultipleChoice: '#/components/schemas/MultipleChoiceAnswer'
          Number: '#/components/schemas/NumberAnswer'
          Timeout: '#/components/schemas/TimeoutAnswer'
    MultipleChoiceAnswer:
      allOf:
        - $ref: '#/components/schemas/AnswerParametersType'
        - type: object
          required:
            - id
            - synonym
          properties:
            id:
              type: string
              description: The id / key of the choice.
              example: 'yes'
            synonym:
              type: string
              description: The synonym with which this choice was triggered.
              example: 'affirmative'
    NumberAnswer:
      allOf:
        - $ref: '#/components/schemas/AnswerParametersType'
        - type: object
          required:
            - value
          properties:
            value:
              type: string
              description: The number that was entered.
              example: 8645
    TimeoutAnswer:
      allOf:
        - $ref: '#/components/schemas/AnswerParametersType'
    InactivityParameters:
      type: object
      required:
        - dialogId
        - projectContext
        - timestamp
        - duration
        - callback
      properties:
        dialogId:
          $ref: 'shared/tokens.yml#/components/schemas/DialogId'
        projectContext:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectContext'
        timestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        duration:
          $ref: 'shared/time.yml#/components/schemas/InactivityDuration'
        callback:
          $ref: 'shared/project.yml#/components/schemas/Callback'
    TerminatedParameters:
      type: object
      required:
        - dialogId
        - projectContext
        - timestamp
        - reason
        - callback
      properties:
        dialogId:
          $ref: 'shared/tokens.yml#/components/schemas/DialogId'
        projectContext:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectContext'
        timestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        reason:
          type: string
          enum:
            - botTerminated
            - callerTerminated
            - callBridged
            - callForwarded
        callback:
          $ref: 'shared/project.yml#/components/schemas/Callback'
    RecordingParameters:
      type: object
      required:
        - dialogId
        - projectContext
        - timestamp
        - status
        - recordingId
        - callback
      properties:
        dialogId:
          $ref: 'shared/tokens.yml#/components/schemas/DialogId'
        projectContext:
          $ref: 'shared/tokens.yml#/components/schemas/ProjectContext'
        timestamp:
          $ref: 'shared/time.yml#/components/schemas/Timestamp'
        status:
          type: string
          enum:
            - Available
        recordingId:
          $ref: 'shared/recording.yml#/components/schemas/RecordingId'
        callback:
          $ref: 'shared/project.yml#/components/schemas/Callback'
      discriminator:
        propertyName: status
        mapping:
          Available: '#/components/schemas/RecordingAvailable'
    RecordingAvailable:
      allOf:
        - $ref: '#/components/schemas/RecordingParameters'
        - type: object
