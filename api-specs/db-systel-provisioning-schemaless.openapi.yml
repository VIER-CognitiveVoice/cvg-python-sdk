openapi: 3.0.0

info:
  title: Generic Service Provisioning API design
  description: Generic API
  version: 1.0.0

servers:
  - url: /v1

tags:
  - name: provision
    description: |-
      Provision resources.
      
      For example in order to create a cognitive service the implementor of the API could 
      perform the following tasks
    
      1. create a resource group in Microsoft Azure
    
      2. create cognitive service inside the resource group
  - name: delete
    description: delete resource
  - name: billing
    description: returns billing data for a given customer asset number
  - name: change
    description: |-
      potential use cases could be:
  
      - add a user
      - remove a user
      - more complex example: exchange the text-to-speech back end of a voice bot

security:
  - bearerAuth: []

paths:
  /services/{ca}:
    parameters:
      - name: ca
        in: path
        description: The customer asset identifier
        required: true
        schema:
          $ref: '#/components/schemas/CustomerAssetId'
    put:
      tags:
        - provision
      summary: provision resources
      requestBody:
        description: service is meant to be generic
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuration'
      responses:
        202:
          description: Accepted and provisioning scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningState'
        401:
          description: Authentication required!
    get:
      tags:
        - provision
      summary: get information about provisioned resource
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningState'
              examples:
                processing:
                  summary: An example for in progress
                  value:
                    status: 'processing'
                resourceCreated:
                  summary: An example for when the request has been fully processed
                  value:
                    status: 'created'
                    configuration:
                      principalId: "1a4877ac-1f0d-4cc7-a199-ed69996d3550"
                      tenantId: "a1a72d9c-49e6-4f6d-9af6-5aafa1183bfd"
        401:
          description: Authentication required!
        404:
          description: 'Not Found'
    delete:
      tags:
        - delete
      summary: remove resource
      responses:
        202:
          description: Accepted and decommissioning scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningState'
        401:
          description: Authentication required!
        404:
          description: 'Not Found'
  /services/{ca}/bill:
    parameters:
      - name: ca
        in: path
        description: The customer asset identifier
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: Start of billing period
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: to
        in: query
        description: End of billing period (inclusive)
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
    get:
      tags:
        - billing
      summary: billing data
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
        400:
          description: Requested billing period is too long.
        401:
          description: Authentication required!
  /services/{ca}/configuration/{field}:
    parameters:
      - name: ca
        in: path
        description: The customer asset identifier
        required: true
        schema:
          $ref: '#/components/schemas/CustomerAssetId'
      - name: field
        in: path
        description: The field to operate on
        required: true
        schema:
          $ref: '#/components/schemas/ConfigurationFieldName'
    get:
      tags:
        - change
      description: gets the value of the field "field" in the configuration object
      responses:
        200:
          description: The value of the field, null if unset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArbitraryJson'
        401:
          description: Authentication required!
        404:
          description: If the field is unknown.
    put:
      tags:
        - change
      description: |-
        assuming that "field" is an array, add a new entry to the array. 
        If "field" is of another type, set the value.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArbitraryJson'
      responses:
        202:
          description: Accepted and provisioning scheduled
        401:
          description: Authentication required!
        400:
          description: Read-only field
  /services/{ca}/configuration/{field}/{entry}:
    parameters:
      - name: ca
        in: path
        description: The customer asset identifier
        required: true
        schema:
          $ref: '#/components/schemas/CustomerAssetId'
      - name: field
        in: path
        description: The field to operate on
        required: true
        schema:
          $ref: '#/components/schemas/ConfigurationFieldName'
      - name: entry
        in: path
        description: The field entry to operate on
        required: true
        schema:
          $ref: '#/components/schemas/ConfigurationListEntryId'
    get:
      tags:
        - change
      description: assuming that field is an array with entries uniquely identified by the value of "entry" gets the value of the entry
      responses:
        200:
          description: value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArbitraryJson'
        400:
          description: Read-only field
        401:
          description: Authentication required!
        404:
          description: 'Not Found'
    delete:
      tags:
        - change
      description: 'delete entry, request is idempotent'
      responses:
        202:
          description: Accepted and provisioning scheduled
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: opaque
  schemas:
    Configuration:
      description: optional/can be empty; generic object, that contains fields depending on the use case
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ArbitraryJson'
    ProvisioningState:
      oneOf:
        - $ref: '#/components/schemas/ProvisioningStateProcessing'
        - $ref: '#/components/schemas/ProvisioningStateCreated'
        - $ref: '#/components/schemas/ProvisioningStateFailed'
        - $ref: '#/components/schemas/ProvisioningStateDeleting'
      discriminator:
        propertyName: status
        mapping:
          processing: '#/components/schemas/ProvisioningStateProcessing'
          created: '#/components/schemas/ProvisioningStateCreated'
          failed: '#/components/schemas/ProvisioningStateFailed'
          deleting: '#/components/schemas/ProvisioningStateDeleting'
    ProvisioningStateProcessing:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - processing
    ProvisioningStateFailed:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - failed
    ProvisioningStateCreated:
      type: object
      required:
        - status
        - configuration
      properties:
        status:
          type: string
          enum:
            - created
        configuration:
          $ref: '#/components/schemas/Configuration'
    ProvisioningStateDeleting:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - deleting
    Bill:
      required:
        - assetId
        - usage
      type: object
      properties:
        assetId:
          $ref: '#/components/schemas/CustomerAssetId'
        usage:
          $ref: '#/components/schemas/Usage'
    Usage:
      required:
        - amount
        - unit
      properties:
        amount:
          type: number
          format: int32
          example: 50
        unit:
          type: string
          enum:
            - requests
            - dollars
            - euros
            - euro cents
    ArbitraryJson:
      description: |-
        Can contain arbitrary JSON data, including `null`.
      nullable: true
    CustomerAssetId:
      type: string
      description: A string that uniquely identifies a customer asset.
      nullable: false
    ConfigurationFieldName:
      type: string
      description: The name of a configuration field
      nullable: false
    ConfigurationListEntryId:
      type: string
      description: A string that uniquely identifies an entry in a collection.
      nullable: false
    Timestamp:
      description: An instant of time, measured in milliseconds since the epoch (1970-01-01) in UTC.
      type: integer
      format: int64
      example: 1535546718115
      nullable: false
